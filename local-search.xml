<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>图</title>
    <link href="/2022/11/12/csharp/tu/"/>
    <url>/2022/11/12/csharp/tu/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/B38A17D34E9DADE17DDC9A880ABC3F2C.jpg"></p><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/IMG20221112213833.jpg"><br><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/1.jpg"></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/IMG20221112213816.jpg"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/IMG20221112213757.jpg"><br><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/IMG20221112213801.jpg"></p><hr><p>渡易水歌</p><p><a href="https://so.gushiwen.cn/authorv_2128926194cd.aspx">佚名</a>  <a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%85%88%E7%A7%A6">〔先秦〕</a></p><p>风萧萧兮易水寒，壮士一去兮不复还。<br>探虎穴兮入蛟宫，仰天呼气兮成白虹。</p><hr>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法练习</title>
    <link href="/2022/11/12/csharp/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/11/12/csharp/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/B38A17D34E9DADE1279EB10AF815CD90.jpg"></p><h1 id="算法练习"><a href="#算法练习" class="headerlink" title="算法练习"></a>算法练习</h1><p><a href="https://tupi00.github.io/2022/11/06/csharp/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/">数据结构和算法的学习 - tupi的博客 (tupi00.github.io)</a></p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">/*</span><br><span class="hljs-comment">设计一个高效算法，将顺序表L的所有元素逆置，要求算法的空间复杂度为O(1)</span><br><span class="hljs-comment">2022年11月12日14:27:58-2022年11月12日14:29:31</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">int</span>[] array1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-built_in">int</span>[] array2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>Console.WriteLine(Reverse(array1));<br>Console.WriteLine(Reverse(array2));<br><span class="hljs-function"><span class="hljs-built_in">int</span>[] <span class="hljs-title">Reverse</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>&#123;<br><span class="hljs-built_in">int</span>[] array=data;<br><span class="hljs-built_in">int</span> length=array.Length;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt;length /<span class="hljs-number">2</span>; i++)<br>&#123;<br><span class="hljs-built_in">int</span> temp=array[i];<br>array[i]=array[length<span class="hljs-number">-1</span>-i];<br>array[length<span class="hljs-number">-1</span>-i]=temp;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">/*</span><br><span class="hljs-comment">对于长度为n的顺序表L，编写一个时间复杂度为O(n)，空间复杂度为O(1)的算法，该算法删除线性表中所有值为x的数据元素。</span><br><span class="hljs-comment">2022年11月12日14:30:23-2022年11月12日14:35:27</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">int</span>[] array = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>&#125;;<br>Console.WriteLine(DeleteByValue(array,<span class="hljs-number">3</span>));<br><span class="hljs-function"><span class="hljs-built_in">int</span>[] <span class="hljs-title">DeleteByValue</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data,<span class="hljs-built_in">int</span> data2</span>)</span><br>&#123;<br><span class="hljs-keyword">var</span> array=data;<br><span class="hljs-keyword">var</span> length=data.Length;<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">value</span>=data2;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt;length; i++)<br>&#123;<br><span class="hljs-keyword">if</span>(array[i]==<span class="hljs-keyword">value</span>)<br>array[i]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">/*</span><br><span class="hljs-comment">从顺序表中删除值在s和t之间的所有元素，如果s和t不合理，显示错误信息并退出。</span><br><span class="hljs-comment">2022年11月12日14:36:04-2022年11月12日14:43:19</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">int</span>[] array1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-built_in">int</span>[] array2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><br>Console.WriteLine(DeleteByRange(array1,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br>Console.WriteLine(DeleteByRange(array2,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>));<br><br><span class="hljs-function"><span class="hljs-built_in">int</span>[] <span class="hljs-title">DeleteByRange</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data, <span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y</span>)</span><br>&#123;<br><span class="hljs-keyword">var</span> array = data;<br><span class="hljs-keyword">var</span> length = data.Length;<br><span class="hljs-keyword">var</span> start = x;<br><span class="hljs-keyword">var</span> end = y;<br><br><span class="hljs-keyword">if</span> (start &gt; end)<br>&#123;<br>Console.WriteLine(<span class="hljs-string">&quot;error&quot;</span>);<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>&#123;<br><span class="hljs-keyword">var</span> now=array[i];<br><span class="hljs-keyword">if</span>(now&gt;=start&amp;&amp;now&lt;=end)<br>array[i]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">/*</span><br><span class="hljs-comment">从有序的顺序表中删除所有的重复的元素，使得顺序表的元素不重复</span><br><span class="hljs-comment">2022年11月12日14:43:31-2022年11月12日14:52:33</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">int</span>[] array = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>&#125;;<br><br>Console.WriteLine(Deduplication(array));<br><br><span class="hljs-function"><span class="hljs-built_in">int</span>[] <span class="hljs-title">Deduplication</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] data</span>)</span><br>&#123;<br><span class="hljs-keyword">var</span> array=data;<br><span class="hljs-keyword">var</span> length=data.Length;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>&#123;<br><span class="hljs-keyword">var</span> now = array[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i+<span class="hljs-number">1</span>; j &lt; length; j++)<br>&#123;<br><span class="hljs-keyword">if</span>(array[j]==now)<br>array[j]=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">/*</span><br><span class="hljs-comment">将两个有序表合并成一个有序表</span><br><span class="hljs-comment">2022年11月12日14:52:472022年11月12日15:40:44</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">int</span>[] array1 = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br><span class="hljs-built_in">int</span>[] array2 = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><br>Console.WriteLine(Combined(array1,array2));<br><br><span class="hljs-function"><span class="hljs-built_in">int</span>[] <span class="hljs-title">Combined</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] x,<span class="hljs-built_in">int</span>[]y</span>)</span><br>&#123;<br><span class="hljs-built_in">int</span>[] array1 =x;<br><span class="hljs-keyword">var</span> length1=x.Length;<br><span class="hljs-built_in">int</span>[] array2 =y;<br><span class="hljs-keyword">var</span> length2=y.Length;<br><br><span class="hljs-keyword">var</span> length=length1+length2;<br><span class="hljs-built_in">int</span>[] array=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[length];<br><span class="hljs-built_in">int</span> index1=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">int</span> index2=<span class="hljs-number">0</span>;<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt;length; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (index1&gt;length1<span class="hljs-number">-1</span>)<br>&#123;<br>array[i]=array2[index2];<br>index2++;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (index2&gt;length2<span class="hljs-number">-1</span>)<br>&#123;<br>array[i] = array1[index1];<br>index1++;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (array1[index1] &lt;= array2[index2])<br>&#123;<br>array[i]=array1[index1];<br>index1++;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>array[i]=array2[index2];<br>index2++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">/*</span><br><span class="hljs-comment">已知在一维数组A[m+n]中依次存放两个线性表（a1,a2…,am）和（b1,b2…,bn），</span><br><span class="hljs-comment">编写算法将两个线性表位置对换成（b1,b2,…bn,a1,a2,…am）</span><br><span class="hljs-comment">2022年11月12日15:41:16-2022年11月12日16:20:20</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">int</span>[] array = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><br>Console.WriteLine(Exchange(array,<span class="hljs-number">2</span>));<span class="hljs-comment">//34512</span><br><br><span class="hljs-function"><span class="hljs-built_in">int</span>[] <span class="hljs-title">Exchange</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] x,<span class="hljs-built_in">int</span> m</span>)</span><br>&#123;<br><br><span class="hljs-keyword">var</span> array=x;<br><span class="hljs-keyword">var</span> length=x.Length;<br><br><span class="hljs-built_in">int</span> index=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">int</span>[] temp=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[m];<br><span class="hljs-built_in">int</span> indexOfTemp=<span class="hljs-number">0</span>;<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<span class="hljs-comment">//2</span><br>&#123;<br>temp[i]=array[i];<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = m; i &lt;((length+<span class="hljs-number">2</span>)-m); i++)<span class="hljs-comment">//3</span><br>&#123;<br>array[index]=array[i];<br>Console.WriteLine(i);<br>index++;<span class="hljs-comment">//3</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = index; i &lt; length; i++)<span class="hljs-comment">//2</span><br>&#123;<br>array[i]=temp[indexOfTemp];<br>indexOfTemp++;<br>&#125;<br><br><span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><a href="https://so.gushiwen.cn/shiwenv_1da16040c5e0.aspx"><strong>鹧鸪天·代人赋</strong></a></p><p><a href="https://so.gushiwen.cn/authorv.aspx?name=%E8%BE%9B%E5%BC%83%E7%96%BE">辛弃疾</a><a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%AE%8B%E4%BB%A3">〔宋代〕</a></p><p>晚日寒鸦一片愁。柳塘新绿却温柔。若教眼底无离恨，不信人间有白头。<br>肠已断，泪难收。相思重上小红楼。情知已被山遮断，频倚阑干不自由。</p>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
      <category>数据结构和算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>学习路线</title>
    <link href="/2022/11/09/csharp/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <url>/2022/11/09/csharp/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h1><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/v2-2199a29dfca7a04270fafb715f221ac2_720w.webp"><br><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/aspnetcore-developer-roadmap.zh-Hans.png" alt="参考"><br><img src="http://assets.processon.com/chart_image/636f5d801e085317c6a93f24.png" alt="我的学习路线"><br><a href="https://www.processon.com/view/link/636f67ce7d9c0806b8a4e87f#map">详情地址</a></p><hr><p>侠客行</p><p><a href="https://so.gushiwen.cn/authorv_b90660e3e492.aspx">李白</a>  <a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%94%90%E4%BB%A3">〔唐代〕</a></p><p>赵客缦胡缨，吴钩霜雪明。<br>银鞍照白马，飒沓如流星。<br>十步杀一人，千里不留行。<br>事了拂衣去，深藏身与名。<br>闲过信陵饮，脱剑膝前横。<br>将炙啖朱亥，持觞劝侯嬴。<br>三杯吐然诺，五岳倒为轻。<br>眼花耳热后，意气素霓生。<br>救赵挥金槌，邯郸先震惊。<br>千秋二壮士，烜赫大梁城。<br>纵死侠骨香，不惭世上英。<br>谁能书阁下，白首太玄经</p><hr>]]></content>
    
    
    <categories>
      
      <category>c#</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/11/07/csharp/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/11/07/csharp/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/B38A17D34E9DADE19A1E9B8FDFDBD27A.jpg"></p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/IMG20221112214916.jpg"><br><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/IMG20221112214922.jpg"></p><h2 id="常用模式"><a href="#常用模式" class="headerlink" title="常用模式"></a>常用模式</h2><h3 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h3><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/IMG20221112215202.jpg"><br><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/IMG20221112215207.jpg"><br><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/IMG20221112215213.jpg"></p><h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/IMG20221112215218.jpg"></p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/IMG20221112215222.jpg"></h2><p>沁园春·雪</p><p><a href="https://so.gushiwen.cn/authorv_22550138288c.aspx">毛泽东</a>  <a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E8%BF%91%E7%8E%B0%E4%BB%A3">〔近现代〕</a></p><p>北国风光，千里冰封，万里雪飘。<br>望长城内外，惟余莽莽；大河上下，顿失滔滔。<br>山舞银蛇，原驰蜡象，欲与天公试比高。<br>须晴日，看红装素裹，分外妖娆。<br>江山如此多娇，引无数英雄竞折腰。<br>惜秦皇汉武，略输文采；唐宗宋祖，稍逊风骚。<br>一代天骄，成吉思汗，只识弯弓射大雕。<br>俱往矣，数风流人物，还看今朝。</p><hr>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>写在前面</title>
    <link href="/2022/11/06/web/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/"/>
    <url>/2022/11/06/web/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/OIP-C%20(1).jpg"></p><h1 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h1><hr><p>蜀道难</p><p><a href="https://so.gushiwen.cn/authorv_b90660e3e492.aspx">李白</a>  <a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%94%90%E4%BB%A3">〔唐代〕</a></p><p>噫吁嚱，危乎高哉！<br>蜀道之难，难于上青天！<br>蚕丛及鱼凫，开国何茫然！<br>尔来四万八千岁，不与秦塞通人烟。<br>西当太白有鸟道，可以横绝峨眉巅。<br>地崩山摧壮士死，然后天梯石栈相钩连。<br>上有六龙回日之高标，下有冲波逆折之回川。<br>黄鹤之飞尚不得过，猿猱欲度愁攀援。<br>青泥何盘盘，百步九折萦岩峦。<br>扪参历井仰胁息，以手抚膺坐长叹。<br>问君西游何时还？畏途巉岩不可攀。<br>但见悲鸟号古木，雄飞雌从绕林间。<br>又闻子规啼夜月，愁空山。<br>蜀道之难，难于上青天，使人听此凋朱颜！<br>连峰去天不盈尺，枯松倒挂倚绝壁。<br>飞湍瀑流争喧豗，砯崖转石万壑雷。<br>其险也如此，嗟尔远道之人胡为乎来哉！<br>剑阁峥嵘而崔嵬，一夫当关，万夫莫开。<br>所守或匪亲，化为狼与豺。<br>朝避猛虎，夕避长蛇，磨牙吮血，杀人如麻。<br>锦城虽云乐，不如早还家。<br>蜀道之难，难于上青天，侧身西望长咨嗟！</p><hr>]]></content>
    
    
    <categories>
      
      <category>本站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>c#学习</title>
    <link href="/2022/11/06/csharp/csharp/"/>
    <url>/2022/11/06/csharp/csharp/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/8f43d3cb984565983b69724a9a4f1917.jpg"></p><h1 id="c"><a href="#c" class="headerlink" title="c#"></a>c#</h1><h2 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h2><p><img src="/" alt="知识结构"><br><a href="https://www.zhixi.com/view/2d765ec3">详情地址</a></p><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><ul><li>注释<ul><li>&#x2F;&#x2F;&#x2F;用来描述方法等</li><li>&#x2F;&#x2F;写在变量后面，描述值、</li><li>&#x2F;**&#x2F;用来描述思路</li></ul></li><li>每条语句<code>;</code><ul><li>建议一条语句一行多行</li></ul></li><li>代码块<code>&#123;&#125;</code></li><li>入口方法 <code>Main</code>方法</li><li>面向对象思想.封装,继承，多态<ul><li>封装的定义的命名都Pascal</li><li>使用封装的声明都驼峰(变量)</li></ul></li><li>类型：决定存储大小和方式<ul><li>值类型.在栈上存储值.<ul><li>枚举</li><li>结构体</li></ul></li><li>引用类型.在栈上存储堆上值的引用地址.<ul><li>类</li><li>委托</li><li>接口<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li>编译过程<ul><li>代码-&gt;程序集(exe&#x2F;dll)</li><li>JIT即时编译成机器指令</li></ul></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>用于表示数据的容器，名字是变量名，类型(存储的大小)是变量类型,值是容器的内容(二进制表示)</li><li>不能重名，必须初始化</li><li>变量名<ul><li>英文字母,下划线，数字(不能开头).</li><li>驼峰法</li><li>不能重名<ul><li>关键字的可以<code>@</code>前缀</li></ul></li><li>变量规范<ul><li>中式英文</li><li>一般是名词</li><li>私有建议<code>_</code></li></ul></li></ul></li><li>变量类型<ul><li>整数</li><li>浮点数</li><li>字符</li><li>字符串</li></ul></li><li>变量值交换 使用中间的变量(一般叫temp)</li><li>作用域：在代码块中<ul><li>除非指定访问级别(不建议)</li></ul></li></ul><h4 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h4><ul><li>byte 1字节</li><li>int 4字节</li><li>long 8字节</li></ul><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>科学计数法来存储，同级别字节不精确.</p><ul><li>float 4字节 f</li><li>double 8字节</li><li>decimal 金融</li></ul><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><ul><li>char</li><li><code>&#39;&#39;</code></li><li>在存储时本质是数字,ACSII<ul><li>A65</li><li>a97</li></ul></li><li>转义字符:<ul><li><code>\n</code></li><li><code>\\</code></li><li><code>\&quot;</code></li><li><code>\t</code></li><li><code>\&#39;</code></li><li><code>@</code>取消转义字符:<code>@&quot;D:\_blog\blogs\hexoblog\source\_posts\csharp&quot;</code></li></ul></li></ul><p></p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li>char的数组</li><li>只能一行内<ul><li><code>@</code>可换行<ul><li>字符串内双引号表示引号<code>@&quot; &quot;&quot; &quot;</code></li></ul></li></ul></li><li><code>+</code>字符串拼接</li><li>命令行:<ul><li>输入:<code>Console.ReadLine();</code></li><li>输出:<code>Console.WriteLine();</code></li></ul></li><li>格式化输出<ul><li><code>&#123;0&#125;</code>作为模板</li></ul></li><li>常用方法<ul><li><code>ToLower() ToPower()</code></li><li><code>Trim() TrimStrart() TrimEnd()</code>去空格</li><li><code>Split()</code></li></ul></li></ul><h4 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h4><ul><li><code>true</code></li><li><code>false</code></li></ul><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li>隐式:小到大</li><li>显示:<code>()</code></li><li><code>Convert</code>静态类</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><code>+ - * / %</code></li><li><code>+= -= *= /=</code></li><li><code>=</code></li><li><code>&gt; &lt; == &gt;= &lt;= !=</code></li><li><code>&amp;&amp; || !</code>短路效应</li><li><code>++ --</code>在前先运算，在后先赋值.</li><li><code>?:</code></li><li><code>is</code>检查类型匹配</li><li><code>as</code>类型转换,失败为null</li><li><code>new</code>运算符创建类型的新实例</li><li><code>default() sizeof()</code></li><li><code>.</code>成员访问</li></ul><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>程序执行的操作采用语句表达。 常见操作包括声明变量、赋值、调用方法、循环访问集合，以及根据给定条件分支到一个或另一个代码块。<br><code>&#123;&#125;</code>为一条语句</p><h4 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h4><ul><li><code>for</code></li><li><code>foreach</code>枚举集合元素</li><li><code>do</code></li><li><code>while</code>一般用于死循环<br><code>break</code>跳出<br><code>continue</code>下次迭代</li></ul><h4 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h4><ul><li><code>if</code>根据布尔值<ul><li><code>?:</code></li></ul></li><li><code>switch</code>根据表达式匹配的模式</li></ul><h4 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h4><ul><li><code>break continue</code></li><li><code>return</code></li><li><code>throw</code></li><li><code>goto</code>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">goto</span> Found;<br>Found:<br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h4><p>获取给定对象的互斥 lock，执行语句块，然后释放 lock。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>连续的相同大小的内存</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>封装一系列语句的代码块.<br>声明时方法签名必须不同.</p><h4 id="方法签名"><a href="#方法签名" class="headerlink" title="方法签名"></a>方法签名</h4><ul><li>可选的访问级别，如 <code>public</code>或 <code>private</code> 默认值为<code>private</code>。</li><li>可选的修饰符，如 <code>abstract</code>或<code>sealed</code>。</li><li>返回值，或 <code>void</code>如果该方法不具有）。</li><li>方法名称。<ul><li>动词.</li></ul></li><li>任何方法参数。 方法参数在括号内，并且用逗号分隔。 空括号指示方法不需要任何参数。默认按值传递(传递值的副本)<ul><li>数组参数 <code>params</code>将参数组装成数组.要求在最后</li><li>可选参数 在形参赋值</li><li>按引用传递 <code>ref out in</code> 可以更改引用本身的值</li></ul></li></ul><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><ul><li>递归函数<ul><li>先<code>return</code>这个方法的结果</li><li>终止条件</li></ul></li><li>命名参数<code>:</code>指定参数的值</li></ul><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>同名,不同参数.</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>不可变的值</p><ul><li><code>const</code></li></ul><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>声明一组命名常量 (值类型) 的非重复值类型<br><code>enum</code><br>除了<code>char</code>都可以作为基础类型</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">enum</span> Color: <span class="hljs-built_in">long</span><br>&#123;<br>    Red,<br>    Green,<br>    Blue<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>=</code>对成员进行关联值.<ul><li>默认从零自增</li><li>成员间也可以关联</li></ul></li></ul><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>可封装数据和相关功能的值类型<br><code>struct</code><br>对信息的整合</p><h4 id="record"><a href="#record" class="headerlink" title="record"></a>record</h4><hr><p>行路难·其一<br>[李白]<br>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难，行路难，多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p><hr>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>c#</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>unity的学习</title>
    <link href="/2022/11/06/csharp/unity/"/>
    <url>/2022/11/06/csharp/unity/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/R-C%20(1).jpg"></p><h1 id="unity"><a href="#unity" class="headerlink" title="unity"></a>unity</h1><hr><p><a href="https://so.gushiwen.cn/shiwenv_05e2f6fc757c.aspx"><strong>梦游天姥吟留别</strong></a></p><p><a href="https://so.gushiwen.cn/authorv.aspx?name=%E6%9D%8E%E7%99%BD">李白</a><a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%94%90%E4%BB%A3">〔唐代〕</a></p><p>海客谈瀛洲，烟涛微茫信难求；<br>越人语天姥，云霞明灭或可睹。<br>天姥连天向天横，势拔五岳掩赤城。<br>天台四万八千丈，对此欲倒东南倾。(四万 一作：一万)</p><p>我欲因之梦吴越，一夜飞度镜湖月。<br>湖月照我影，送我至剡溪。<br>谢公宿处今尚在，渌水荡漾清猿啼。<br>脚著谢公屐，身登青云梯。<br>半壁见海日，空中闻天鸡。<br>千岩万转路不定，迷花倚石忽已暝。<br>熊咆龙吟殷岩泉，栗深林兮惊层巅。<br>云青青兮欲雨，水澹澹兮生烟。<br>列缺霹雳，丘峦崩摧。<br>洞天石扉，訇然中开。<br>青冥浩荡不见底，日月照耀金银台。<br>霓为衣兮风为马，云之君兮纷纷而来下。<br>虎鼓瑟兮鸾回车，仙之人兮列如麻。<br>忽魂悸以魄动，恍惊起而长嗟。<br>惟觉时之枕席，失向来之烟霞。</p><p>世间行乐亦如此，古来万事东流水。<br>别君去兮何时还？且放白鹿青崖间，须行即骑访名山。<br>安能摧眉折腰事权贵，使我不得开心颜！</p><hr>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>c#</category>
      
      <category>unity</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java作业</title>
    <link href="/2022/11/06/java/java/"/>
    <url>/2022/11/06/java/java/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/114456914.jpg"><br>学习java以作毕设使用，感谢学校老师指导</p><h2 id="好用工具"><a href="#好用工具" class="headerlink" title="好用工具"></a>好用工具</h2><ol><li>UML图插件:PlantUML Integration和Sequence Diagram插件<ul><li>Sequence Diagram 自动生成<ul><li>对方法右键SD生成调用关系 <ul><li>配置层数,一般5层</li><li>可对代码单独查看</li></ul></li><li>创建文件的方式也可以</li><li>生成UML配合插件</li></ul></li><li>PlantUML Integration 手动编辑，创建文件<ul><li>没成功:Graphviz安装<a href="https://graphviz.org/download/">Download | Graphviz</a></li></ul></li></ul></li><li>Debug:<ol><li>断点打在接口方法上，当运行时进入接口的实现类（如果接口实现类太多的时候很好用）  </li><li>异常断点，添加异常断点，运行时如果会抛异常，那么会自动停在抛异常的代码上  </li><li>属性断点，断点加在字段上，当属性的值发生改变时，会自动停住</li></ol></li><li>代码生成插件:EasyCode<a href="https://www.bilibili.com/video/BV1YY41187fY/?spm_id_from=333.788.recommend_more_video.17&vd_source=91f53763fb9a775417e4fbe107927eb5">【IDEA】IDEA代码全自动生成，国产插件就是牛！_哔哩哔哩_bilibili</a><ol><li>MapperScan dao层</li><li>配置数据库连接信息及Mybatis的mapper-locations</li><li><code>SpringboottexampleApplication</code>类启动项目</li><li>在controller层测试运行接口</li></ol></li><li>idea上的postman:Restful Fast Request插件<ul><li>配置:项目名，地址。添加个测试环境</li><li>小火箭-&gt;小飞机</li></ul></li><li>Mybatis sql语句日志: Mybatis Log Free<ul><li>在工具中显示</li><li>在applicationContext.xml中配置:  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl<br></code></pre></td></tr></table></figure></li></ul></li></ol><ul><li>log4j<br>  log4j.properties  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Global logging configuration</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置日志输出级别以及输出目的地，可以设置多个输出目的地，开发环境下，日志级别要设置成DEBUG或者ERROR</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">前面写日志级别，逗号后面写输出目的地：我自己下面设置的目的地相对应，以逗号分开</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">log4j.rootLogger = [level],appenderName1,appenderName2</span><br>log4j.rootLogger=DEBUG,CONSOLE,LOGFILE<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">### 控制台输出 ####</span></span><br>log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出到控制台</span><br>log4j.appender.CONSOLE.Target = System.out<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定控制台输出日志级别</span><br>log4j.appender.CONSOLE.Threshold = DEBUG<br><span class="hljs-meta prompt_"># </span><span class="language-bash">默认值是 <span class="hljs-literal">true</span>, 表示是否立即输出</span><br>log4j.appender.CONSOLE.ImmediateFlush = true<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置编码方式</span><br>log4j.appender.CONSOLE.Encoding = UTF-8<br><span class="hljs-meta prompt_"># </span><span class="language-bash">日志输出布局</span><br>log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果日志输出布局为PatternLayout 自定义级别，需要使用ConversionPattern指定输出格式</span><br>log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %5p (%c:%L) - %m%n<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">### 输出错误信息到文件 ####</span></span><br>log4j.appender.LOGFILE=org.apache.log4j.FileAppender<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定输出文件路径</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">log4j.appender.LOGFILE.File =F://Intellij idea/logs/error.log</span> <br>log4j.appender.LOGFILE.File =./logs/error.log <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">日志输出到文件，默认为<span class="hljs-literal">true</span></span><br>log4j.appender.LOGFILE.Append = true<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定输出日志级别</span><br>log4j.appender.LOGFILE.Threshold = ERROR<br><span class="hljs-meta prompt_"># </span><span class="language-bash">是否立即输出，默认值是 <span class="hljs-literal">true</span>,</span><br>log4j.appender.LOGFILE.ImmediateFlush = true<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置编码方式</span><br>log4j.appender.LOGFILE.Encoding = UTF-8<br><span class="hljs-meta prompt_"># </span><span class="language-bash">日志输出布局</span><br>log4j.appender.LOGFILE.layout = org.apache.log4j.PatternLayout<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果日志输出布局为PatternLayout 自定义级别，需要使用ConversionPattern指定输出格式</span><br>log4j.appender.LOGFILE.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n<br></code></pre></td></tr></table></figure></li></ul><ol start="6"><li><p>日志配置</p><ul><li>项目启动日志:启动appliction配置-&gt;modify-&gt;log-&gt;save…<br>  填写log，文件所在目录，文件名</li></ul><ul><li>代码日志:<br>  在打开的设置页面进行设置：选择你需要输出日志的服务，然后点击logs，保存到本地（注意一定要先把这个日志输出的文件创建出来，不然你会看不到你的日志）</li></ul></li><li><p>Lombok</p></li><li><p>tomcat中文乱码<br> 打开tomcat的&#x2F;conf&#x2F;server.xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> <span class="hljs-attr">URIEncoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p> 打开tomcat的\conf\logging.properties</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">java.util.logging.ConsoleHandler.Level=FINE<br>java.util.logging.ConsoleHandler.formatter=org.apache.juli.OnLLineFormatter<br>java.util.logging.ConsoleHandler.encoding=GBK<br></code></pre></td></tr></table></figure></li><li><p>Maven Helper帮助依赖</p></li><li><p>阿里的仓库:D:\Program Files\JetBrains\IntelliJ IDEA 2021.3.3\plugins\maven\lib\maven3\conf\setting.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ol><ul><li>maven-search 快速查找依赖</li></ul><h2 id="SSM整体架构"><a href="#SSM整体架构" class="headerlink" title="SSM整体架构"></a>SSM整体架构</h2><p>任务:完成RESTful5接口 post,put,get,delete<br>流程:</p><ol><li>建立和连接sql</li><li>建立工程结构<ul><li>使用easy code-&gt;controller,dao,entity,service.mapper.xml</li><li>easycode的spring-data模式不生产mapper.xml，而且内置了CRUD实现</li></ul></li><li>添加依赖<ul><li><code>&lt;packaging&gt;war&lt;/packaging&gt;</code></li><li>可配合maven-search更多查找</li><li>主要依赖:<ul><li>mybatis:mybatis,mybatis-spring</li><li>mysql:mysql-connector-java,druid</li><li>spring&#x2F;springmvc:spring-webmvc,spring-jdbc</li><li>servlet&#x2F;jsp:javax.servlet-api,jsp-api</li><li>json:jackson-databind,fastjson</li><li>lombok:lombok</li><li>log4j:log4j,commons-logging</li><li>测试:spring-test,junit</li></ul></li></ul><ol start="4"><li>配置tomcat</li><li>更改为注解开发</li><li>填充业务逻辑</li></ol></li></ol><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>导入sql:<br>mysql -uroot -p mybatis &lt; 路径<br>导出sql:<br>mysqldump -uroot -p mybatis &gt; 路径</p></blockquote><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li>无法解析 org.springframework:spring:5.3.15 清理损坏的工件数据（.lastUpdated 文件）并重新加载项目。<br>解决:<br>更改setting.xml,修改maven路径<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml.">&lt;!-- localRepository<br>| The path to the local repository maven will use to store artifacts.<br>|<br>| Default: $&#123;user.home&#125;/.m2/repository<br>–&gt;<br>&lt;localRepository&gt;D:\maven&lt;/localRepository&gt;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>在config搜索maven进行配置tomcat</p></blockquote><ul><li><p>No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal> or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>.</p><ul><li><pre><code class="hljs">添加build`&lt;defaultGoal&gt;compile&lt;/defaultGoal&gt;`</code></pre></li></ul></li><li><p>Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!</p><ul><li>pom的properties:<code>&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</code></li></ul></li><li><ul><li>添加依赖  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.plexus<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>plexus-utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.plexus<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>plexus-interpolation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.shared<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-filtering<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean wit</p><ul><li>核心配置类<code>@mapperscan</code></li></ul></li><li><p>Failed to load class”org.slf4j.impl.StaticLoggerBinder”.</p><ul><li>添加slf4j-simple依赖</li></ul></li><li><p>HTTP状态 404 - 未找到</p></li><li><p>org.thymeleaf.exceptions.TemplateInputException: Error resolving template</p><ul><li>删除target目录</li></ul></li><li><p>中文乱码</p><ul><li>tomcat的logging.properties<ul><li>&#96;&#96;&#96;shell<br>  java.util.logging.ConsoleHandler.level &#x3D; FINE<br>  java.util.logging.ConsoleHandler.formatter &#x3D;java.util.logging.SimpleFormatter<br>  java.util.logging.ConsoleHandler.encoding &#x3D; GBK  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">- <br><br><br><br><br><br><br><br>### junit<br>### 日期<br><br>###  日志<br>```<span class="hljs-type">xml</span><br>&lt;dependency&gt;  <br>&lt;groupId&gt;org.slf4j&lt;/groupId&gt;  <br>&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;  <br>&lt;<span class="hljs-keyword">version</span>&gt;<span class="hljs-number">2.0</span><span class="hljs-number">.3</span>&lt;/<span class="hljs-keyword">version</span>&gt;  <br>&lt;/dependency&gt;<br>```  <br>然后在resources下增加 log4j.properties文件，内容如下  <br>```shell<br>#将等级为<span class="hljs-keyword">DEBUG</span>的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码<br>log4j.rootLogger=<span class="hljs-keyword">DEBUG</span>,console,file<br><br>#控制台输出的相关设置<br>log4j.appender.console = org.apache.log4j.ConsoleAppender<br>log4j.appender.console.Target = <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span><br>log4j.appender.console.Threshold=<span class="hljs-keyword">DEBUG</span><br>log4j.appender.console.layout = org.apache.log4j.PatternLayout<br>log4j.appender.console.layout.ConversionPattern=[%c]-%m%n<br><br>#文件输出的相关设置<br>log4j.appender.file = org.apache.log4j.RollingFileAppender<br>log4j.appender.file.File=./<span class="hljs-keyword">log</span>/logFile.<span class="hljs-keyword">log</span><br>log4j.appender.file.MaxFileSize=<span class="hljs-number">10</span>mb<br>log4j.appender.file.Threshold=<span class="hljs-keyword">DEBUG</span><br>log4j.appender.file.layout=org.apache.log4j.PatternLayout<br>log4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n<br><br>#日志输出级别<br>log4j.logger.org.mybatis=<span class="hljs-keyword">DEBUG</span><br>log4j.logger.java.<span class="hljs-keyword">sql</span>=<span class="hljs-keyword">DEBUG</span><br>log4j.logger.java.<span class="hljs-keyword">sql</span>.<span class="hljs-keyword">Statement</span>=<span class="hljs-keyword">DEBUG</span><br>log4j.logger.java.<span class="hljs-keyword">sql</span>.ResultSet=<span class="hljs-keyword">DEBUG</span><br>log4j.logger.java.<span class="hljs-keyword">sql</span>.PreparedStatement=<span class="hljs-keyword">DEBUG</span><br><br></code></pre></td></tr></table></figure>在类中:<code>static final Logger log= LoggerFactory.getLogger(UserController.class);</code><br>在方法中调用:<code>log.info(&quot;获取全部user&quot;);</code></li></ul></li></ul></li></ul><hr><p><a href="https://so.gushiwen.cn/shiwenv_6a23fa2dab40.aspx"><strong>劝学</strong></a></p><p><a href="https://so.gushiwen.cn/authorv.aspx?name=%E9%A2%9C%E7%9C%9F%E5%8D%BF">颜真卿</a><a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%94%90%E4%BB%A3">〔唐代〕</a></p><p>三更灯火五更鸡，正是男儿读书时。<br>黑发不知勤学早，白首方悔读书迟。</p><hr>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>毕业设计</title>
    <link href="/2022/11/06/java/school/"/>
    <url>/2022/11/06/java/school/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/R-C%20(2).jpg"></p><h1 id="毕业设计"><a href="#毕业设计" class="headerlink" title="毕业设计"></a>毕业设计</h1><hr><p><a href="https://so.gushiwen.cn/shiwenv_b4fbe7244670.aspx"><strong>赠别二首·其二</strong></a></p><p><a href="https://so.gushiwen.cn/authorv.aspx?name=%E6%9D%9C%E7%89%A7">杜牧</a><a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%94%90%E4%BB%A3">〔唐代〕</a></p><p>多情却似总无情，唯觉樽前笑不成。<br>蜡烛有心还惜别，替人垂泪到天明。</p><hr>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法的学习</title>
    <link href="/2022/11/06/csharp/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/11/06/csharp/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/v2-4537af4143f242a63266873ccece7196_720w%20(1).webp"></p><h1 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h1><p><a href="https://www.bilibili.com/video/BV1o34y197b9?p=19&vd_source=5197af4ff987c96800ce69fe5913f522">教程</a><br><a href="https://tupi00.github.io/2022/11/12/csharp/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/">练习</a><br>程序员之内功</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>描述存储的结构<br>数据:计算机存储的任何东西,如图像，文字，视频…<br>数据元素:如一条学生记录<br>数据项:元素中的列，如学号，姓名.<br>数据对象:一组性质相同的数据元素的集合,如整数.<br>数据类型:如变量的类型.<br>数据结构的分类</p><ul><li>集合:数据间无关系</li><li>线性结构 先后顺序关系，只能一条</li><li>树形结构 根节点分支散页，像家谱</li><li>图 关系复杂的网状，像地图</li></ul><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>元素间有一对一的位置关系<br>List泛型<br>使用BCL的List线性表,f12查看更多方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//2022年11月7日05:29:48</span><br><br>List&lt;<span class="hljs-built_in">string</span>&gt; strList=<span class="hljs-keyword">new</span>();<br>strList.Add(<span class="hljs-string">&quot;123&quot;</span>);<span class="hljs-comment">//0</span><br>strList.Add(<span class="hljs-string">&quot;456&quot;</span>);<span class="hljs-comment">//1</span><br>strList.Add(<span class="hljs-string">&quot;789&quot;</span>);<span class="hljs-comment">//2</span><br>strList.Add(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-comment">//3</span><br>Console.WriteLine(strList[<span class="hljs-number">2</span>]);<span class="hljs-comment">//通过索引器访问元素</span><br>strList.Remove(<span class="hljs-string">&quot;789&quot;</span>);<span class="hljs-comment">//移除元素</span><br>Console.WriteLine(strList.Count);<span class="hljs-comment">//大小</span><br>strList.Clear();<span class="hljs-comment">//清空</span><br>Console.WriteLine(strList.Count);<br>/CopyTo(),IndexOf(),FindIndex(),Insert(),RemoveAll(),RemoveAt(),Sort(),<br></code></pre></td></tr></table></figure><h4 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h4><p>判断index暂时不做</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//2022年11月7日05:53:42</span><br><span class="hljs-comment">//2.自己实现list</span><br><span class="hljs-comment">//接口IList</span><br><span class="hljs-comment">//实现方式:顺序表，单链表，双向链表，循环链表</span><br><span class="hljs-comment">//2022年11月7日05:57:26</span><br><span class="hljs-comment">//顺序表：表中的元素的内存位置是连续的，数据顺序存储.</span><br><span class="hljs-comment">//知道第一个元素的地址和大小就能算出其他元素的地址</span><br><span class="hljs-comment">//c#的数组.</span><br><span class="hljs-comment">//3.使用顺序表</span><br>SeqList&lt;<span class="hljs-built_in">string</span>&gt; seqList=<span class="hljs-keyword">new</span>();<br>seqList.Add(<span class="hljs-string">&quot;123&quot;</span>);<br>seqList.Add(<span class="hljs-string">&quot;456&quot;</span>);<br>seqList.Add(<span class="hljs-string">&quot;789&quot;</span>);<br>seqList.Add(<span class="hljs-string">&quot;0&quot;</span>);<br>SeqList&lt;<span class="hljs-built_in">string</span>&gt;.PrintfAll(seqList);<br>Console.WriteLine(seqList.GetElement(<span class="hljs-number">0</span>));<br>Console.WriteLine(seqList[<span class="hljs-number">0</span>]);<br>seqList.Insert(<span class="hljs-string">&quot;666&quot;</span>,<span class="hljs-number">1</span>);<br>SeqList&lt;<span class="hljs-built_in">string</span>&gt;.PrintfAll(seqList);<br>seqList.Delete(<span class="hljs-number">2</span>);<br>SeqList&lt;<span class="hljs-built_in">string</span>&gt;.PrintfAll(seqList);<br>seqList.Clear();<br>SeqList&lt;<span class="hljs-built_in">string</span>&gt;.PrintfAll(seqList);<br>Console.WriteLine(<span class="hljs-string">&quot;ok&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出结果:</span><br><span class="hljs-comment">------------------</span><br><span class="hljs-comment">123 456 789 0 </span><br><span class="hljs-comment">123</span><br><span class="hljs-comment">123</span><br><span class="hljs-comment">123 666 456 789 0 </span><br><span class="hljs-comment">123 456 789 0 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">ok</span><br><span class="hljs-comment">-------------------</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//1.IList</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title">IListDS</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">GetLength</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span>;<br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">IsEmpty</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params">T item</span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span>(<span class="hljs-params">T item,<span class="hljs-built_in">int</span> index</span>)</span>;<br><span class="hljs-function">T <span class="hljs-title">Delete</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)</span>;<br>T <span class="hljs-keyword">this</span>[<span class="hljs-built_in">int</span> index] &#123;<span class="hljs-keyword">get</span>;&#125;<br><span class="hljs-function">T <span class="hljs-title">GetElement</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)</span>;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">Locate</span>(<span class="hljs-params">T <span class="hljs-keyword">value</span></span>)</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">SeqList</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">IListDS</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br>T[] data;<span class="hljs-comment">//用来存储数据</span><br><span class="hljs-built_in">int</span> count=<span class="hljs-number">0</span>;<span class="hljs-comment">//存储数据的个数</span><br><span class="hljs-comment">//数据扩容思想 当data满了的时候，自动创建更大的数组去承接数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SeqList</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> size</span>)<span class="hljs-comment">//size最大容量</span></span><br>&#123;<br>data=<span class="hljs-keyword">new</span> T[size];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SeqList</span>():<span class="hljs-title">this</span>(<span class="hljs-params"><span class="hljs-number">10</span></span>)<span class="hljs-comment">//默认构造函数，容量10</span></span><br>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-keyword">this</span>[<span class="hljs-built_in">int</span> index] =&gt; <br>GetElement(index);<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params">T item</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span> (count==data.Length)<span class="hljs-comment">//判断数组有没有满</span><br>&#123;<br>Console.Write(<span class="hljs-string">&quot;顺序表已满&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>data[count]=item;<span class="hljs-comment">//count此时作为计数器,最大的元素位置</span><br>count++;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>&#123;<br>count=<span class="hljs-number">0</span>;<span class="hljs-comment">//因为索引是0，每次取数据就不存在</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">Delete</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)<span class="hljs-comment">//和insert差不多</span></span><br>&#123;<br>T temp=data[index];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = index; i &lt; count; i++)<br>&#123;<br>data[i<span class="hljs-number">-1</span>]=data[i];<span class="hljs-comment">//数据向前移动</span><br>&#125;<br>count--;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">GetElement</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span> (index&gt;=<span class="hljs-number">0</span>&amp;&amp;index&lt;=count<span class="hljs-number">-1</span>)<span class="hljs-comment">//判断索引是否存在</span><br>&#123;<br><span class="hljs-keyword">return</span> data[index];<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>Console.Write(<span class="hljs-string">&quot;索引不存在&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">default</span>(T);<span class="hljs-comment">//返回默认值</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetLength</span>()</span><br>&#123;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span>(<span class="hljs-params">T item, <span class="hljs-built_in">int</span> index</span>)</span><br>&#123;<br><span class="hljs-comment">//index的位置和后面的元素都应该向后移动一位</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = count; i &gt;=index; i--)<span class="hljs-comment">//从前向后遍历会覆盖值</span><br>&#123;<br>data[i+<span class="hljs-number">1</span>]=data[i];<br>&#125;<br>data[index]=item;<br>count++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsEmpty</span>()</span><br>&#123;<br><span class="hljs-keyword">return</span> count==<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Locate</span>(<span class="hljs-params">T <span class="hljs-keyword">value</span></span>)</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (data[i].Equals(<span class="hljs-keyword">value</span>))<br>&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//表示经过遍历仍未找到数据.</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintfAll</span>(<span class="hljs-params">SeqList&lt;T&gt; seqList</span>)<span class="hljs-comment">//遍历打印</span></span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; seqList.GetLength(); i++)<br>&#123;<br>Console.Write(seqList[i] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>Console.WriteLine();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>顺序表优点:易查找；缺点:不易增删<br>链式表 逻辑上相邻的元素不要求物理上相邻<br>链表易增删慢查找存储<br>链表的元素:节点&#x3D;数据+指针(引用)<br>头节点无数据,尾节点空指针<br>实现:节点类 数据和引用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//2022年11月7日10:33:58</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br>T data;<span class="hljs-comment">//数据</span><br>Node&lt;T&gt; next;<span class="hljs-comment">//引用</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span>(<span class="hljs-params">T data</span>)<span class="hljs-comment">//只传递数据</span></span><br>&#123;<br><span class="hljs-keyword">this</span>.data=data;<br>next=<span class="hljs-literal">null</span>;<span class="hljs-comment">//尾节点</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span>(<span class="hljs-params">T data,Node&lt;T&gt; next</span>)<span class="hljs-comment">//传递数据和指针  </span></span><br>&#123;<br><span class="hljs-keyword">this</span>.data=data;<br><span class="hljs-keyword">this</span>.next=next;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span>(<span class="hljs-params">Node&lt;T&gt; next</span>)<span class="hljs-comment">//只传入指针 </span></span><br>&#123;<br><span class="hljs-keyword">this</span>.next=next;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span>() <span class="hljs-comment">//空方法</span></span><br>&#123;<br>data=<span class="hljs-literal">default</span>(T);<br>next=<span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> T Data<br>&#123;<br><span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> data; &#125;<br><span class="hljs-keyword">set</span> &#123; data = <span class="hljs-keyword">value</span>; &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> Node&lt;T&gt; Next<br>&#123;<br><span class="hljs-keyword">get</span>&#123;<span class="hljs-keyword">return</span> next;&#125;<br><span class="hljs-keyword">set</span>&#123;next=<span class="hljs-keyword">value</span>;&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//实现单链表，IList接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">LinkList</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">IList</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br><span class="hljs-comment">//使用节点进行存储</span><br>Node&lt;T&gt; head;<span class="hljs-comment">//存储一个头结点</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkList</span>()<span class="hljs-comment">//构造</span></span><br>&#123;<br>head=<span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-keyword">this</span>[<span class="hljs-built_in">int</span> index]<br>&#123;<br><span class="hljs-keyword">get</span><br>&#123;<br>Node&lt;T&gt; temp = head;<span class="hljs-comment">//从头节点开始遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= index; i++)<br>&#123;<br>temp = temp.Next;<span class="hljs-comment">//temp向后移动</span><br>&#125;<br><span class="hljs-keyword">return</span> temp.Data;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Count</span>()</span><br>&#123;<br>Node&lt;T&gt; temp=head;<br><span class="hljs-built_in">int</span> count=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(temp.Next!=<span class="hljs-literal">null</span>)<br>&#123;<br>count++;<br>temp=temp.Next;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> IsReadOnly =&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();<br><br><span class="hljs-built_in">int</span> ICollection&lt;T&gt;.Count =&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();<br><br>T IList&lt;T&gt;.<span class="hljs-keyword">this</span>[<span class="hljs-built_in">int</span> index] &#123; <span class="hljs-keyword">get</span> =&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException(); <span class="hljs-keyword">set</span> =&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException(); &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params">T item</span>)</span><br>&#123;<br>Node&lt;T&gt; newNode=<span class="hljs-keyword">new</span> Node&lt;T&gt;(item);<span class="hljs-comment">//根据新的数据创建一个新的节点</span><br><span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span>)<br>&#123;<br>head=newNode;<span class="hljs-comment">//新节点成为头节点</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//把新节点放在链表的尾部</span><br><span class="hljs-comment">//访问尾结点</span><br>Node&lt;T&gt; temp=head;<span class="hljs-comment">//从头节点开始遍历</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (temp.Next != <span class="hljs-literal">null</span>)<br>&#123;<br>temp=temp.Next;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//next为空，找到了尾节点</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>temp.Next=newNode;<span class="hljs-comment">//让尾节点的next指向新节点。新节点成为了尾节点，添加成功</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>&#123;<br>head=<span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">Contains</span>(<span class="hljs-params">T item</span>)</span><br>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CopyTo</span>(<span class="hljs-params">T[] array, <span class="hljs-built_in">int</span> arrayIndex</span>)</span><br>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> IEnumerator&lt;T&gt; <span class="hljs-title">GetEnumerator</span>()</span><br>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">IndexOf</span>(<span class="hljs-params">T item</span>)</span><br>&#123;<br>Node&lt;T&gt; temp = head;<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (temp.Data.Equals(item))<br>&#123;<br><span class="hljs-keyword">return</span> index;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>(temp.Next!=<span class="hljs-literal">null</span>)<br>&#123;<br>index++;<br>temp = temp.Next;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index, T item</span>)</span><br>&#123;<br><span class="hljs-keyword">var</span> newNode=<span class="hljs-keyword">new</span> Node&lt;T&gt;(item);<span class="hljs-comment">//插入的新节点</span><br><span class="hljs-comment">//暂时不做数据判断</span><br><span class="hljs-keyword">if</span>(index==<span class="hljs-number">0</span>)<span class="hljs-comment">//插入头节点的情况</span><br>&#123;<br>newNode.Next=head;<span class="hljs-comment">//新节点指向原来的头节点</span><br>head=newNode;<span class="hljs-comment">//新节点成为了头节点</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//1.修改上一个节点的next为新节点;2.将自己的next设置为index原来的节点</span><br><span class="hljs-comment">//访问indexs所在的节点</span><br>Node&lt;T&gt; temp = head;<span class="hljs-comment">//从头节点开始遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= index<span class="hljs-number">-1</span>; i++)<span class="hljs-comment">//先访问到index-1</span><br>&#123;<br>temp=temp.Next;<span class="hljs-comment">//temp向后移动</span><br>&#125;<br>Node&lt;T&gt; preNode=temp;<span class="hljs-comment">//上一节点</span><br>Node&lt;T&gt; currentNode=temp.Next;<span class="hljs-comment">//index所在的节点</span><br><span class="hljs-comment">//插入:</span><br>preNode.Next=newNode;<br>newNode.Next=currentNode;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">Remove</span>(<span class="hljs-params">T item</span>)</span><br>&#123;<br>Console.Write(<span class="hljs-string">&quot;暂时不要求&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RemoveAt</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>)<span class="hljs-comment">//删除头节点</span><br>&#123;<br>head=head.Next;<br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//删除普通节点</span><br>&#123;<br><span class="hljs-comment">//1.修改上一个节点的next为下一个节点</span><br><span class="hljs-comment">//访问indexs所在的节点</span><br>Node&lt;T&gt; temp = head;<span class="hljs-comment">//从头节点开始遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= index - <span class="hljs-number">1</span>; i++)<span class="hljs-comment">//先访问到index-1</span><br>&#123;<br>temp = temp.Next;<span class="hljs-comment">//temp向后移动</span><br>&#125;<br>Node&lt;T&gt; preNode = temp;<span class="hljs-comment">//上一节点</span><br>Node&lt;T&gt; nextNode = temp.Next.Next;<span class="hljs-comment">//Next是要删除的节点，Next.Next下一个节点</span><br><br>preNode.Next = nextNode;<br>&#125;<br>&#125;<br><br>IEnumerator IEnumerable.GetEnumerator()<br>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintfAll</span>(<span class="hljs-params">LinkList&lt;T&gt; seqList</span>)<span class="hljs-comment">//遍历打印</span></span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; seqList.Count(); i++)<br>&#123;<br>Console.Write(seqList[i] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>Console.WriteLine();<br>&#125;<br>&#125;<br><span class="hljs-comment">//测试</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>&#123;<br>LinkList&lt;<span class="hljs-built_in">string</span>&gt; list=<span class="hljs-keyword">new</span>();<br><br>list.Add(<span class="hljs-string">&quot;123&quot;</span>);<br>list.Add(<span class="hljs-string">&quot;456&quot;</span>);<br>list.Add(<span class="hljs-string">&quot;789&quot;</span>);<br>list.Add(<span class="hljs-string">&quot;0&quot;</span>);<br><br>LinkList&lt;<span class="hljs-built_in">string</span>&gt;.PrintfAll(list);<br>list.Insert(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;666&quot;</span>);<br>LinkList&lt;<span class="hljs-built_in">string</span>&gt;.PrintfAll(list);<br>Console.WriteLine(list.IndexOf(<span class="hljs-string">&quot;666&quot;</span>));<br>list.RemoveAt(<span class="hljs-number">3</span>);<br>LinkList&lt;<span class="hljs-built_in">string</span>&gt;.PrintfAll(list);<br>list.Clear();<br>list.Add(<span class="hljs-string">&quot;000&quot;</span>);<br>LinkList&lt;<span class="hljs-built_in">string</span>&gt;.PrintfAll(list);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">123 456 789 0 </span><br><span class="hljs-comment">123 456 666 789 0 </span><br><span class="hljs-comment">2</span><br><span class="hljs-comment">123 456 666 0 </span><br><span class="hljs-comment">000 </span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>双向链表:prev,data,next<br>循环列表:尾节点的next是头节点</p><h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h3><p> 线性结构<br>操作受到限制的线性表<br>    栈只能在一端进行<br>    队列的插入在一端，其他操作在另一端<br>栈的操作限定在表尾(栈顶)<br>BCL的栈:<code>Statck&lt;&gt; </code><br>操作:<code>Push(),Pop(),Peek(),Clear(),Count</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//2022年11月7日19:32:47</span><br>Stack&lt;<span class="hljs-built_in">char</span>&gt; stacks=<span class="hljs-keyword">new</span>();<br>stacks.Push(<span class="hljs-string">&#x27;a&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;b&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;c&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;d&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;e&#x27;</span>);<br>Console.WriteLine(stacks.Count);<br><span class="hljs-keyword">var</span> v=stacks.Pop();<br>Console.WriteLine(v);<br>Console.WriteLine(stacks.Count);<br><span class="hljs-keyword">var</span> v2=stacks.Peek();<br>Console.WriteLine(v2);<br>Console.WriteLine(stacks.Count);<br>stacks.Clear();<span class="hljs-comment">//空栈不能进行peek/pop，异常</span><br>Console.WriteLine(stacks.Count);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">5</span><br><span class="hljs-comment">e</span><br><span class="hljs-comment">4</span><br><span class="hljs-comment">d</span><br><span class="hljs-comment">4</span><br><span class="hljs-comment">0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="使用顺序栈"><a href="#使用顺序栈" class="headerlink" title="使用顺序栈"></a>使用顺序栈</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">interface</span> <span class="hljs-title">IStackDS</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br><span class="hljs-built_in">int</span> Count &#123;<span class="hljs-keyword">get</span>;&#125;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">GetLength</span>()</span>;<br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">IsEmpty</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Push</span>(<span class="hljs-params">T item</span>)</span>;<br><span class="hljs-function">T <span class="hljs-title">Pop</span>()</span>;<br><span class="hljs-function">T <span class="hljs-title">Peek</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">StackDS</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">IStackDS</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br>T[] data;<br><span class="hljs-built_in">int</span> top;<span class="hljs-comment">//栈顶的索引</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StackDS</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> size</span>)</span><br>&#123;<br>data=<span class="hljs-keyword">new</span> T[size];<br>top=<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StackDS</span>() : <span class="hljs-title">this</span>(<span class="hljs-params"><span class="hljs-number">10</span></span>)</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Count <br>=&gt; top+<span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>&#123;<br>top=<span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetLength</span>()</span><br>&#123;<br><span class="hljs-keyword">return</span> Count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsEmpty</span>()</span><br>&#123;<br><span class="hljs-keyword">return</span> Count==<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">Peek</span>()</span><br>&#123;<br>T temp = data[top];<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">Pop</span>()</span><br>&#123;<br>T temp=data[top];<br>top--;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Push</span>(<span class="hljs-params">T item</span>)</span><br>&#123;<br>data[top+<span class="hljs-number">1</span>]=item;<span class="hljs-comment">//放在原栈顶的上面</span><br>top++;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>&#123;<br>IStackDS&lt;<span class="hljs-built_in">char</span>&gt; stacks = <span class="hljs-keyword">new</span> StackDS&lt;<span class="hljs-built_in">char</span>&gt;();<br>stacks.Push(<span class="hljs-string">&#x27;a&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;b&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;c&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;d&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;e&#x27;</span>);<br>Console.WriteLine(stacks.Count);<br><span class="hljs-keyword">var</span> v = stacks.Pop();<br>Console.WriteLine(v);<br>Console.WriteLine(stacks.Count);<br><span class="hljs-keyword">var</span> v2 = stacks.Peek();<br>Console.WriteLine(v2);<br>Console.WriteLine(stacks.Count);<br>stacks.Clear();<span class="hljs-comment">//空栈不能进行peek/pop，异常</span><br>Console.WriteLine(stacks.Count);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">5</span><br><span class="hljs-comment">e</span><br><span class="hljs-comment">4</span><br><span class="hljs-comment">d</span><br><span class="hljs-comment">4</span><br><span class="hljs-comment">0</span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h4><p>2022年11月7日20:01:07<br>栈顶设在链表的头部，不需要头节点<br>本来遍历到末尾才能添加,现在新节点指向原来的头节点,头节点指向新节点，此时添加只需要头节点</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c#">LinkStack&lt;<span class="hljs-built_in">char</span>&gt; stacks = <span class="hljs-keyword">new</span>();<br>stacks.Push(<span class="hljs-string">&#x27;a&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;b&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;c&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;d&#x27;</span>);<br>stacks.Push(<span class="hljs-string">&#x27;e&#x27;</span>);<br>Console.WriteLine(stacks.Count);<br><span class="hljs-keyword">var</span> v = stacks.Pop();<br>Console.WriteLine(v);<br>Console.WriteLine(stacks.Count);<br><span class="hljs-keyword">var</span> v2 = stacks.Peek();<br>Console.WriteLine(v2);<br>Console.WriteLine(stacks.Count);<br>stacks.Clear();<span class="hljs-comment">//空栈不能进行peek/pop，异常</span><br>Console.WriteLine(stacks.Count);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br>T data;<br>Node&lt;T&gt; next;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span>(<span class="hljs-params">T data</span>)</span><br>&#123;<br><span class="hljs-keyword">this</span>.data=data;<br>next=<span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span>(<span class="hljs-params">T data,Node&lt;T&gt; next</span>)</span><br>&#123;<br><span class="hljs-keyword">this</span>.data=data;<br><span class="hljs-keyword">this</span>.next=next;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span>(<span class="hljs-params">Node&lt;T&gt; next</span>)</span><br>&#123;<br><span class="hljs-keyword">this</span>.next=next;<br>data=<span class="hljs-literal">default</span>(T);<br>&#125;<br><br><span class="hljs-keyword">public</span> T Data<br>&#123;<br><span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> data; &#125;<br><span class="hljs-keyword">set</span> &#123; data = <span class="hljs-keyword">value</span>; &#125;<br>&#125;<br><span class="hljs-keyword">public</span> Node&lt;T&gt; Next <br>&#123;<br><span class="hljs-keyword">get</span>=&gt;next;<br><span class="hljs-keyword">set</span>=&gt;next=<span class="hljs-keyword">value</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">LinkStack</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">Stack</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br>Node&lt;T&gt; top;<span class="hljs-comment">//栈顶元素节点</span><br><span class="hljs-built_in">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-comment">//栈元素个数</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Count &#123; <span class="hljs-keyword">get</span> =&gt; count; &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetLength</span>()</span> =&gt; count;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> IsEmpty =&gt; count == <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>&#123;<br>count=<span class="hljs-number">0</span>;<br>top=<span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Push</span>(<span class="hljs-params">T item</span>)<span class="hljs-comment">//把新添加的元素作为栈顶元素节点</span></span><br>&#123;<br><span class="hljs-keyword">var</span> newNode=<span class="hljs-keyword">new</span> Node&lt;T&gt;(item);<br>newNode.Next=top;<br>top=newNode;<br>count++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">Pop</span>()</span><br>&#123;<br>T data=top.Data;<br>top=top.Next;<span class="hljs-comment">//top指向栈顶的下面的元素</span><br>top.Next=<span class="hljs-literal">null</span>;<br>count--;<br><span class="hljs-keyword">return</span> data;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">Peek</span>()</span><br>&#123;<br><span class="hljs-keyword">return</span> top.Data;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>插入操作限定尾部队尾，其他操作限定在头部队头 空队列<br>前出后进的核酸排队<br>BLC的<code>Queue</code>泛型类 <code>Enqueue()</code>插队尾 <code>Dequeue()</code>取删队首 <code>Peek()</code>队首的元素 <code>Clear()</code> <code>Count</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//2022年11月7日20:23:45</span><br>Queue&lt;<span class="hljs-built_in">int</span>&gt; q=<span class="hljs-keyword">new</span>();<br>q.Enqueue(<span class="hljs-number">23</span>);<span class="hljs-comment">//队首</span><br>q.Enqueue(<span class="hljs-number">45</span>);<br>q.Enqueue(<span class="hljs-number">67</span>);<br>q.Enqueue(<span class="hljs-number">89</span>);<span class="hljs-comment">//队尾</span><br><br>Console.WriteLine(<span class="hljs-string">&quot;start:&quot;</span>+q.Count);<br><span class="hljs-keyword">var</span> v=q.Dequeue();<br>Console.WriteLine(<span class="hljs-string">&quot;删除的元素&quot;</span>+v);<br>Console.WriteLine(<span class="hljs-string">&quot;删除后个数&quot;</span>+q.Count);<br>Console.WriteLine(<span class="hljs-string">&quot;队首元素&quot;</span>+q.Peek());<br>q.Clear();<br>Console.WriteLine(<span class="hljs-string">&quot;清空&quot;</span>+q.Count);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">start:4</span><br><span class="hljs-comment">删除的元素23</span><br><span class="hljs-comment">删除后个数3</span><br><span class="hljs-comment">队首元素45</span><br><span class="hljs-comment">清空0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h4><p>类似顺序栈.<br>队首数组下标0 front<br>队尾 rear<br>队列空:front&#x3D;rear&#x3D;-1<br>循环顺序队列:假溢出<br>删除数据front后移，但是删除过的下标任然可以存储<br>队满后rear从删除过的0再次开始存储</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span>/2022年11月7日20:47:12</span><br>SeqQueue&lt;<span class="hljs-built_in">int</span>&gt; q=<span class="hljs-keyword">new</span>();<br>q.Enqueue(<span class="hljs-number">23</span>);<span class="hljs-comment">//队首</span><br>q.Enqueue(<span class="hljs-number">45</span>);<br>q.Enqueue(<span class="hljs-number">67</span>);<br>q.Enqueue(<span class="hljs-number">89</span>);<span class="hljs-comment">//队尾</span><br><br>Console.WriteLine(<span class="hljs-string">&quot;start:&quot;</span>+q.Count);<br><span class="hljs-keyword">var</span> v=q.Dequeue();<br>Console.WriteLine(<span class="hljs-string">&quot;删除的队首&quot;</span>+v);<br>Console.WriteLine(<span class="hljs-string">&quot;删除后个数&quot;</span>+q.Count);<br>Console.WriteLine(<span class="hljs-string">&quot;现在队首元素&quot;</span>+q.Peek());<br>q.Clear();<br>Console.WriteLine(<span class="hljs-string">&quot;清空&quot;</span>+q.Count);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">start:4</span><br><span class="hljs-comment">删除的队首23</span><br><span class="hljs-comment">删除后个数3</span><br><span class="hljs-comment">现在队首元素45</span><br><span class="hljs-comment">清空0</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title">IQueue</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br><span class="hljs-built_in">int</span> Count &#123;<span class="hljs-keyword">get</span>;&#125;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">GetLength</span>()</span>;<br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">IsEmpty</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Enqueue</span>(<span class="hljs-params">T item</span>)</span>;<br><span class="hljs-function">T <span class="hljs-title">Dequeue</span>()</span>;<br><span class="hljs-function">T <span class="hljs-title">Peek</span>()</span>;<br>&#125;<br><span class="hljs-comment">//顺序队列</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">SeqQueue</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">IQueue</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br>T[] data;<br><span class="hljs-built_in">int</span> count;<span class="hljs-comment">//当前元素个数</span><br><span class="hljs-built_in">int</span> front;<span class="hljs-comment">//队首元素索引-1</span><br><span class="hljs-built_in">int</span> rear;<span class="hljs-comment">//队尾元素索引</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SeqQueue</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> size</span>)</span><br>&#123;<br>data=<span class="hljs-keyword">new</span> T[size];<br>count=<span class="hljs-number">0</span>;<br>front=<span class="hljs-number">-1</span>;<br>rear=<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SeqQueue</span>():<span class="hljs-title">this</span>(<span class="hljs-params"><span class="hljs-number">10</span></span>)</span>&#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Count =&gt; count;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>&#123;<br>count=<span class="hljs-number">0</span>;<br>front=rear=<span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">Dequeue</span>()</span><br>&#123;<br><span class="hljs-keyword">if</span> (count&gt;<span class="hljs-number">0</span>)<br>&#123;<br>T temp=data[front+<span class="hljs-number">1</span>];<br>front++;<br>count--;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>Console.WriteLine(<span class="hljs-string">&quot;队列为空&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">default</span>(T);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Enqueue</span>(<span class="hljs-params">T item</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span> (count==data.Length)<br>&#123;<br>Console.WriteLine(<span class="hljs-string">&quot;队列已满&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (rear==data.Length)<span class="hljs-comment">//1.rear在最后一个元素索引</span><br>&#123;<br>data[<span class="hljs-number">0</span>]=item;<br>rear=<span class="hljs-number">0</span>;<br>count++;<br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//正常放在rear后面</span><br>&#123;<br>data[rear+<span class="hljs-number">1</span>]=item;<br>rear++;<br>count++;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetLength</span>()</span><br>=&gt;count;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsEmpty</span>()</span><br>=&gt;count==<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">Peek</span>()</span><br>&#123;<br>T temp = data[front + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="链队列"><a href="#链队列" class="headerlink" title="链队列"></a>链队列</h4><p>单链表的简化，仅对首尾操作，不对中间操作</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span>/2022年11月7日21:06:34</span><br><span class="hljs-comment">//</span><br>LinkQueue&lt;<span class="hljs-built_in">int</span>&gt; q=<span class="hljs-keyword">new</span>();<br>q.Enqueue(<span class="hljs-number">23</span>);<span class="hljs-comment">//队首</span><br>q.Enqueue(<span class="hljs-number">45</span>);<br>q.Enqueue(<span class="hljs-number">67</span>);<br>q.Enqueue(<span class="hljs-number">89</span>);<span class="hljs-comment">//队尾</span><br><br>Console.WriteLine(<span class="hljs-string">&quot;start:&quot;</span>+q.Count);<br><span class="hljs-keyword">var</span> v=q.Dequeue();<br>Console.WriteLine(<span class="hljs-string">&quot;删除的队首&quot;</span>+v);<br>Console.WriteLine(<span class="hljs-string">&quot;删除后个数&quot;</span>+q.Count);<br>Console.WriteLine(<span class="hljs-string">&quot;现在队首元素&quot;</span>+q.Peek());<br>q.Clear();<br>Console.WriteLine(<span class="hljs-string">&quot;清空&quot;</span>+q.Count);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">start:4</span><br><span class="hljs-comment">删除的队首23</span><br><span class="hljs-comment">删除后个数3</span><br><span class="hljs-comment">现在队首元素45</span><br><span class="hljs-comment">清空0</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br>T data;<br>Node&lt;T&gt; next;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span>(<span class="hljs-params">T data</span>)</span>=&gt;<span class="hljs-keyword">this</span>.data=data;<br><br><span class="hljs-keyword">public</span> T Data<br>&#123;<br><span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> data; &#125;<br><span class="hljs-keyword">set</span> &#123; data = <span class="hljs-keyword">value</span>; &#125;<br>&#125;<br><span class="hljs-keyword">public</span> Node&lt;T&gt; Next<br>&#123;<br><span class="hljs-keyword">get</span> =&gt;next;<br><span class="hljs-keyword">set</span> =&gt;next=<span class="hljs-keyword">value</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">LinkQueue</span>&lt;<span class="hljs-title">T</span>&gt;:<span class="hljs-title">Queue</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br>Node&lt;T&gt; front;<span class="hljs-comment">//头节点</span><br>Node&lt;T&gt; rear;<span class="hljs-comment">//尾节点</span><br><span class="hljs-built_in">int</span> count;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkQueue</span>()</span><br>&#123;<br>front=<span class="hljs-literal">null</span>;<br>rear=<span class="hljs-literal">null</span>;<br>count=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Count=&gt;count;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetLength</span>()</span>=&gt;count;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsEmpty</span>()</span>=&gt;count==<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>&#123;<br>front = <span class="hljs-literal">null</span>;<br>rear = <span class="hljs-literal">null</span>;<br>count = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Enqueue</span>(<span class="hljs-params">T item</span>)<span class="hljs-comment">//队尾入队</span></span><br>&#123;<br><span class="hljs-keyword">var</span> newNode = <span class="hljs-keyword">new</span> Node&lt;T&gt;(item);<br><span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)<span class="hljs-comment">//当前无元素</span><br>&#123;<br>front=newNode;<br>rear=newNode;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>rear.Next=newNode;<br>rear=newNode;<br>&#125;<br>count++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">Dequeue</span>()</span><br>&#123;<br><span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)<br>&#123;<br>Console.WriteLine(<span class="hljs-string">&quot;队列为空&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">default</span>(T);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>)<span class="hljs-comment">//只有一个元素，队头就是队尾</span><br>&#123;<br>Node&lt;T&gt; node=rear;<br>front=<span class="hljs-literal">null</span>;<br>rear=<span class="hljs-literal">null</span>;<br>count--;<br><span class="hljs-keyword">return</span> node.Data;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>Node&lt;T&gt; node=front;<br>front=front.Next;<br>count--;<br><span class="hljs-keyword">return</span> node.Data;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">Peek</span>()</span><br>&#123;<br><span class="hljs-keyword">if</span> (front == <span class="hljs-literal">null</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">default</span>(T);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> front.Data;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="栈和队列的应用-回文"><a href="#栈和队列的应用-回文" class="headerlink" title="栈和队列的应用:回文"></a>栈和队列的应用:回文</h4><p>一个放栈中，一个放队列中,分别判断出来的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//2022年11月7日21:30:57</span><br><span class="hljs-built_in">string</span> str=Console.ReadLine();<br>Stack&lt;<span class="hljs-built_in">char</span>&gt; stack=<span class="hljs-keyword">new</span>();<br>Queue&lt;<span class="hljs-built_in">char</span>&gt; queue=<span class="hljs-keyword">new</span>();<br><span class="hljs-comment">//存储</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; str.Length; i++)<br>&#123;<br>stack.Push(str[i]);<br>queue.Enqueue(str[i]);<br>&#125;<br><span class="hljs-comment">//比较</span><br><span class="hljs-built_in">bool</span> isHui=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">while</span> (stack.Count&gt;<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (stack.Pop()!=queue.Dequeue())<br>&#123;<br>isHui=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>Console.Write(<span class="hljs-string">&quot;是回文:&quot;</span>+isHui);<br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符组成的有序的序列</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//2022年11月8日06:54:27</span><br><span class="hljs-comment">//基本功能:实现</span><br>StringDS s=<span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;1,a b =&quot;</span>);<br>Console.WriteLine(s.IndexOf(<span class="hljs-keyword">new</span> StringDS(<span class="hljs-string">&quot;a&quot;</span>)));<br>Console.WriteLine(s[<span class="hljs-number">4</span>]);<br>Console.WriteLine(s.Compare(s.SubString(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">2</span><br><span class="hljs-comment">b</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">StringDS</span><br>&#123;<br><span class="hljs-built_in">char</span>[] data;<span class="hljs-comment">//存放字符</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>传入char[]构造<span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StringDS</span>(<span class="hljs-params"><span class="hljs-built_in">char</span>[] array</span>)</span><br>&#123;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[array.Length];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; data.Length; i++)<br>&#123;<br>data[i] = array[i];<br>&#125;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>传入string构造<span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StringDS</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span><br>&#123;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[str.Length];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; data.Length; i++)<br>&#123;<br>data[i] = str[i];<br>&#125;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>索引器<span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">char</span> <span class="hljs-keyword">this</span>[<span class="hljs-built_in">int</span> index]&#123;<span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> data[index]; &#125; &#125;<span class="hljs-comment">//只读</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>获取字符串长度<span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetLength</span>()</span> =&gt; data.Length;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>字符串的比较<span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Compare</span>(<span class="hljs-params">StringDS s</span>)<span class="hljs-comment">//相同返回0；小-1；大1</span></span><br>&#123;<br><span class="hljs-built_in">int</span> len = <span class="hljs-keyword">this</span>.GetLength() &lt; s.GetLength() ? <span class="hljs-keyword">this</span>.GetLength() : s.GetLength();<span class="hljs-comment">//取得小的字符串的长度</span><br><span class="hljs-built_in">int</span> index = <span class="hljs-number">-1</span>;<span class="hljs-comment">//是否相同,-1相同</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>[i] != s[i])<br>&#123;<br>index = i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (index != <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>[index] &lt; s[index] ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.GetLength() == s.GetLength())<span class="hljs-comment">//前len一样&amp;&amp;长度一样</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//len:abc abcd</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.GetLength() &lt; s.GetLength() ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>连接字符串<span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StringDS <span class="hljs-title">Concat</span>(<span class="hljs-params">StringDS s1,StringDS s2</span>)</span><br>&#123;<br><span class="hljs-built_in">char</span>[] newData=<span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[s1.GetLength()+s2.GetLength()];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; s1.GetLength(); i++)<br>&#123;<br>newData[i]=s1[i];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = s1.GetLength(); i &lt; s1.GetLength()+s2.GetLength(); i++)<br>&#123;<br>newData[i] = s2[i];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StringDS(newData);<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>查询子字符串<span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">IndexOf</span>(<span class="hljs-params">StringDS s</span>)</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-keyword">this</span>.GetLength()-s.GetLength(); i++)<br>&#123;<br><span class="hljs-built_in">bool</span> flag=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i; j &lt; i + s.GetLength(); j++)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>[j]!=s[j-i])<br>&#123;<br>flag=<span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag)<br>&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>子字符串<span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> StringDS <span class="hljs-title">SubString</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index,<span class="hljs-built_in">int</span> length</span>)</span><br>&#123;<br><span class="hljs-keyword">var</span> newData=<span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[length];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = index; i &lt; index+length; i++)<br>&#123;<br>newData[i-index]=data[i];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StringDS(newData);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>2022年11月8日12:51:41<br>线性表的推广<br>n个相同数据类型的有限序列<br>BLC的<code>Array</code>抽象类<br>在堆上分配空间.数组变量是引用.<br>当数组元素是引用类型时，数组包含的只是引用<br><code>Length,Rank,static BinarySearch&lt;T&gt;()搜索值在数组的位置,static Clear(), Clone,static Copy(),CopyTo(),static CreateInstance()创建数组,GetEnumerator(),GetVaule(),static IndexOf&lt;&gt;(),LastIndexOf(),static Reverse(),SetValue,static Sort()</code></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>解决问题的思路.设计好的有限的确切的计算序列，可以解决一类问题.<br>评价标准:时间复杂度和空间复杂度</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>2022年11月8日13:18:07<br>排序项也称为关键码<br>稳定:相同数字,在后 排序要还在后面</p><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p>时间复杂度O(n^2)<br>从索引1的位置开始排序,遍历到末尾<br>拿当前元素跟前面每个比较,前面大就往后移动,小则元素放在其后,注意元素可能是最小<br>相当于从前面开始比较，进行按个头排队伍,由老师控制</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">42</span>,<span class="hljs-number">20</span>,<span class="hljs-number">17</span>,<span class="hljs-number">27</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">17</span>,<span class="hljs-number">48</span>&#125;;<br>InsertSort(data);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> element <span class="hljs-keyword">in</span> data)<br>&#123;<br>Console.Write(element+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-comment">/*8 13 17 17 20 27 42 48 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertSort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] dataArray</span>)</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; dataArray.Length; i++)<br>&#123;<br><span class="hljs-comment"><span class="hljs-doctag">///</span>拿到i位置的元素,跟前面比较，大者后退</span><br><span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span>=dataArray[i];<br><span class="hljs-built_in">bool</span> flag=<span class="hljs-literal">false</span>;<span class="hljs-comment">//有没有插入,用来判断是否插入最前面</span><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=i<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>&#123;<br><span class="hljs-keyword">if</span> (dataArray[j] &gt; <span class="hljs-keyword">value</span>)<br>&#123;<br>dataArray[j+<span class="hljs-number">1</span>]=dataArray[j];<span class="hljs-comment">//后退</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment"><span class="hljs-doctag">///</span>前面比i小</span><br>dataArray[j+<span class="hljs-number">1</span>]=<span class="hljs-keyword">value</span>;<br>flag=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(!flag)<br>&#123;<br>dataArray[<span class="hljs-number">0</span>]=<span class="hljs-keyword">value</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>将相邻的记录的关键码进行比较，前面大则交换面<br>时间复杂度O(n^2).</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//2022年11月8日15:27:21</span><br><span class="hljs-built_in">int</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">42</span>,<span class="hljs-number">20</span>,<span class="hljs-number">17</span>,<span class="hljs-number">27</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">48</span>,<span class="hljs-number">17</span>&#125;;<br>BubbleSort(data);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> element <span class="hljs-keyword">in</span> data)<br>&#123;<br>Console.Write(element+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span>*8 13 17 17 20 27 42 48 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] datas</span>)</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; datas.Length; i++)<br>&#123;<br><span class="hljs-comment"><span class="hljs-doctag">///</span></span><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;data.Length<span class="hljs-number">-1</span>;j++)<span class="hljs-comment">//-1防止下标越界,但是比较的时候是j+1所以还是会遍历完元素</span><br>&#123;<br><span class="hljs-keyword">if</span> (datas[j] &gt; datas[j + <span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-built_in">int</span> temp=datas[j+<span class="hljs-number">1</span>];<br>datas[j+<span class="hljs-number">1</span>]=datas[j];<br>datas[j]=temp;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h4><ol><li>查找最小的数字</li><li>放在0号位置</li><li>从索引1开始找最小数字，放在1号位置(第二层循环)</li><li>依次类推到length-1,因为最后一个肯定最大,共遍历n次</li></ol><ul><li>时间复杂度O(n^2)<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">/*</span><br><span class="hljs-comment">2022年11月8日15:41:54</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">int</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">42</span>,<span class="hljs-number">20</span>,<span class="hljs-number">17</span>,<span class="hljs-number">27</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">48</span>,<span class="hljs-number">17</span>&#125;;<br>SelectSort(data);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> element <span class="hljs-keyword">in</span> data)<br>&#123;<br>Console.Write(element+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span>*8 13 17 17 20 27 42 48 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SelectSort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] datas</span>)</span><br>&#123;<br><span class="hljs-built_in">int</span> length=datas.Length;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length <span class="hljs-number">-1</span>; i++)<br>&#123;<br><span class="hljs-built_in">int</span> min=datas[i];<span class="hljs-comment">//保留最小数字</span><br><span class="hljs-built_in">int</span> minIndex=i;<span class="hljs-comment">//最小数字的索引，用于交换</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i+<span class="hljs-number">1</span>; j &lt;length; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (datas[j]&lt;min)<br>&#123;<br>min=datas[j];<br>minIndex=j;<br>&#125;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span>找到了最小值，进行和i的交换</span><br><span class="hljs-built_in">int</span> temp=datas[i];<br>datas[i]=min;<br>datas[minIndex]=temp;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>综合来说效率较高<br>分治策略</p><ol><li>先从数列找出一个基准数</li><li>分区过程，将比这个数大的全放在右边，小的全放在左边</li><li>在对左右重复2，直到各区只有一个数</li></ol><p>详细:<br>利用函数的递归调用</p><ol><li>从数列中取出一个数作为基准数,一般是第一个，保存到变量x中,此处变成坑</li><li>从后向前，找小于等于x的数,挖到坑中,自己成坑,1成老坑(循环时3是老坑)   为什么后面:因为要过滤成大的数</li><li>从原坑位向后查找大于等于x的数,把数挖到坑中，自己成坑，2成老坑(前坑向前找小，后坑向后找大)</li><li>循环2和3，直到只剩下一个中间数,放入x</li><li>此时左边虽然无序，但是都小于中间数; 右边也无序，但都大于中间数</li><li>对左右进行1234</li></ol><p>演示:<br>假设一开始序列{xi}是：5，3，7，6，4，1，0，2，9，10，8。<br>此时，ref&#x3D;5，i&#x3D;1，j&#x3D;11，从后往前找，第一个比5小的数是x8&#x3D;2，因此序列为：2，3，7，6，4，1，0，5，9，10，8。<br>此时i&#x3D;1，j&#x3D;8，从前往后找，第一个比5大的数是x3&#x3D;7，因此序列为：2，3，5，6，4，1，0，7，9，10，8。<br>此时，i&#x3D;3，j&#x3D;8，从第8位往前找，第一个比5小的数是x7&#x3D;0，因此：2，3，0，6，4，1，5，7，9，10，8。<br>此时，i&#x3D;3，j&#x3D;7，从第3位往后找，第一个比5大的数是x4&#x3D;6，因此：2，3，0，5，4，1，6，7，9，10，8。<br>此时，i&#x3D;4，j&#x3D;7，从第7位往前找，第一个比5小的数是x6&#x3D;1，因此：2，3，0，1，4，5，6，7，9，10，8。<br>此时，i&#x3D;4，j&#x3D;6，从第4位往后找，直到第6位才有比5大的数，这时，i&#x3D;j&#x3D;6，ref成为一条分界线，它之前的数都比它小，之后的数都比它大，对于前后两部分数，可以采用同样的方法来排序。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">/*2022年11月8日15:55:11*/</span><br><span class="hljs-built_in">int</span>[] datas = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">42</span>,<span class="hljs-number">20</span>,<span class="hljs-number">17</span>,<span class="hljs-number">27</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">48</span>,<span class="hljs-number">17</span>&#125;;<br>QuickSort(datas,<span class="hljs-number">0</span>,datas.Length<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> element <span class="hljs-keyword">in</span> datas)<br>&#123;<br>Console.Write(element+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-comment">/*8 13 17 17 20 27 42 48 */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] datas,<span class="hljs-built_in">int</span> start,<span class="hljs-built_in">int</span> end</span>)<span class="hljs-comment">//因为要递归，从start到end做排序</span></span><br>&#123;<br><span class="hljs-keyword">if</span> (start&gt;=end)<span class="hljs-comment">//这种情况没必要排序了</span><br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span>2）以第一个数组元素作为关键数据，赋值给key，即key=A[0]； [1] </span><br><span class="hljs-built_in">int</span> x = datas[start];<br><span class="hljs-comment"><span class="hljs-doctag">///</span>1）设置两个变量i、j，排序开始的时候：i=0，j=N-1； [1] </span><br><span class="hljs-built_in">int</span> i=start;<br><span class="hljs-built_in">int</span> j=end;<br>label:<span class="hljs-comment">//为找中间位的死循环</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>&amp;&amp;i&lt;j)<span class="hljs-comment">//防止超出边界</span><br>&#123;<br><span class="hljs-comment"><span class="hljs-doctag">///</span>3）从j开始向前搜索，即由后开始向前搜索(j--)，找到第一个小于key的值A[j]，将A[j]和A[i]的值交换； [1] </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 坑在i</span><br><span class="hljs-keyword">if</span>(datas[j] &lt;x)<span class="hljs-comment">//找到小于x的数,挖坑</span><br>&#123;<br>datas[i]=datas[j];<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>j--;<span class="hljs-comment">//向左移动，对下一个数作比较</span><br>&#125;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span>4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]的值交换； [1] </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span>坑在j</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>&amp;&amp;i&lt;j)<br>&#123;<br><span class="hljs-keyword">if</span> (datas[i] &gt;x)<span class="hljs-comment">//找到了大于x的数，挖坑</span><br>&#123;<br>datas[j]=datas[i];<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>i++;<span class="hljs-comment">//i没比x大，继续向后</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(i!=j) <span class="hljs-keyword">goto</span> label;<span class="hljs-comment">//没找到中间位置(基准数本应所在位置)，进行死循环</span><br><span class="hljs-keyword">else</span> datas[i]=x;<span class="hljs-comment">//基准数放在中间位i==j的位置</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span>形成 start - i -end</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span>5）重复第3、4步，直到i==j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 递归左边</span><br>QuickSort(datas,start,i<span class="hljs-number">-1</span>);<br><span class="hljs-comment"><span class="hljs-doctag">///</span>递归右边</span><br>QuickSort(datas,i+<span class="hljs-number">1</span>,end);<br><span class="hljs-comment"><span class="hljs-doctag">///</span>直到start==end返回</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><p>将进酒<br>李白 〔唐代〕</p><p>君不见黄河之水天上来，奔流到海不复回。<br>君不见高堂明镜悲白发，朝如青丝暮成雪。<br>人得意须尽欢，莫使金樽空对月。<br>天生我材必有用，千金散尽还复来。<br>烹羊宰牛且为乐，会须一饮三百杯。<br>岑夫子，丹丘生，将进酒，杯莫停。<br>与君歌一曲，请君为我倾耳听。<br>钟鼓馔玉不足贵，但愿长醉不愿醒。<br>古来圣贤皆寂寞，惟有饮者留其名。<br>陈王昔时宴平乐，斗酒十千恣欢谑。<br>主人何为言少钱，径须沽取对君酌。<br>五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。</p><hr>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数据结构和算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我的建站之旅</title>
    <link href="/2022/11/05/web/web/"/>
    <url>/2022/11/05/web/web/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221105201413.jpg"></p><h1 id="我的建站之旅"><a href="#我的建站之旅" class="headerlink" title="我的建站之旅"></a>我的建站之旅</h1><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><p>hexo<br>github作为网站地址<br>腾讯云作为图床<br>使用vscode编写网页的md<br>picgo上传图片</p><h3 id="工作进度"><a href="#工作进度" class="headerlink" title="工作进度"></a>工作进度</h3><p>2022&#x2F;11&#x2F;04<br>入园，打算好好打理博客.<br>2022&#x2F;11&#x2F;05<br>做了一天的hexo，终于可以在本地实现界面.<br>实现网络交互<br>更改主题和模板<br>2022年11月6日11:11:45<br>取消和博客园链接，有力picgo，自己做图床</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="实现网页访问"><a href="#实现网页访问" class="headerlink" title="实现网页访问"></a><font style="color:blue">实现网页访问</font></h4><p>2022年11月5日17:34:08 </p><p>访问<a href="https://tupi00.github.io/%E5%8F%AA%E6%9C%89%E4%B8%80%E7%89%87%E7%99%BD%E7%9A%84%EF%BC%8C%E6%88%91%E5%BB%BA%E7%AB%8B%E7%9A%84%E7%BD%91%E9%A1%B5%E7%9A%84%E5%9C%B0%E5%9D%80%E4%B8%8D%E7%9F%A5%E9%81%93%E5%9C%A8%E5%93%AA%EF%BC%8C%E6%9B%B4%E5%88%AB%E6%8F%90%E5%92%8C%E5%8D%9A%E5%AE%A2%E5%9B%AD%E9%93%BE%E6%8E%A5%E4%BA%86">https://tupi00.github.io/只有一片白的，我建立的网页的地址不知道在哪，更别提和博客园链接了</a>.</p><p>git status<br>git add .<br>git commit -m “2022年11月5日17:37:31”<br>git push main HEAD</p><ul><li>本地和远程没问题</li></ul><p>配置url改为博客地址<br>hexo g</p><h4 id="我的脚本"><a href="#我的脚本" class="headerlink" title="我的脚本:"></a>我的脚本:</h4><p>quickstart:用来简单的开启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd D:\_blog\blogs\hexoblog<br>hexo s<br></code></pre></td></tr></table></figure><p>start:正常启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd blogs<br>cd hexoblog<br>start /min hexo clean<br>ping -n 20 127.0.0.1<br>start /min hexo g<br>ping -n 20 127.0.0.1<br>start /min hexo d<br>ping -n 20 127.0.0.1<br>start taskkill /f /im cmd.exe<br>start D:\_blog\Z_start.bat<br></code></pre></td></tr></table></figure><p>update:不开启服务，上传服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">start /min hexo clean<br>ping -n 20 127.0.0.1<br>start /min hexo g<br>ping -n 20 127.0.0.1<br>start /min hexo d<br>ping -n 20 127.0.0.1<br>cd .deploy_git<br>git add .<br>git commit -m &quot;describe&quot;<br>git remote add origin<br>git push<br>start taskkill /f /im cmd.exe<br></code></pre></td></tr></table></figure><h2 id="荆棘之路"><a href="#荆棘之路" class="headerlink" title="荆棘之路"></a>荆棘之路</h2><h3 id="本地推送到仓库出现问题"><a href="#本地推送到仓库出现问题" class="headerlink" title="本地推送到仓库出现问题"></a><font style="color:blue">本地推送到仓库出现问题</font></h3><p>2022年11月5日15:52:24<br>纯纯的小白 :)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">*fatal: The <span class="hljs-keyword">current</span> branch master has <span class="hljs-keyword">no</span> upstream branch.<span class="hljs-keyword">To</span> push the <span class="hljs-keyword">current</span> branch <span class="hljs-keyword">and</span> <span class="hljs-keyword">set</span> the remote <span class="hljs-keyword">as</span> upstream, use git push <span class="hljs-comment">--set-upstream main master To have this happen automatically for branches without a tracking upstream, see &#x27;push.autoSetupRemote&#x27; in &#x27;git help config&#x27;.*</span><br></code></pre></td></tr></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>完全不懂</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add main https://github.com/tupi00/tupi00.github.io<br>git push<br></code></pre></td></tr></table></figure><h3 id="博客网站是空白一片"><a href="#博客网站是空白一片" class="headerlink" title="博客网站是空白一片"></a><font style="color:blue">博客网站是空白一片</font></h3><h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>替换默认的DNS加速服务:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"># FancyBox<br># jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js<br># fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js<br># fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css<br>jquery: https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js<br>fancybox: https://cdn.bootcdn.net/ajax/libs/fancybox/3.5.1/jquery.fancybox.min.js<br>fancybox_css: https://cdn.bootcdn.net/ajax/libs/fancybox/3.5.1/jquery.fancybox.min.css<br></code></pre></td></tr></table></figure><h2 id="建站心得"><a href="#建站心得" class="headerlink" title="建站心得"></a>建站心得</h2><hr><p>短歌行<br>王建 〔唐代〕</p><p>人初生，日初出。<br>上山迟，下山疾。<br>百年三万六千朝，夜里分将强半日。<br>有歌有舞须早为，昨日健于今日时。<br>人家见生男女好，不知男女催人老。<br>短歌行，无乐声</p><hr>]]></content>
    
    
    <categories>
      
      <category>本站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WPF学习之旅</title>
    <link href="/2022/11/05/csharp/wpf/"/>
    <url>/2022/11/05/csharp/wpf/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221105200311.jpg"></p><h1 id="WPF学习之旅"><a href="#WPF学习之旅" class="headerlink" title="WPF学习之旅"></a>WPF学习之旅</h1><h2 id="学习之因"><a href="#学习之因" class="headerlink" title="学习之因"></a>学习之因</h2><p>对市面上的记录工具不满意，打算自己编译一个日志流水账软件[Briefy](<a href="https://tupi00.github.io/2022/11/06/csharp/briefy/">Briefy日志 - tupi的博客 (tupi00.github.io)</a>)</p><p>2022年11月8日22:21:08<br>暂停学习，转攻unity和c#语法</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><a href="https://www.bilibili.com/video/BV1ht411e7Fe/?vd_source=5197af4ff987c96800ce69fe5913f522">《深入浅出WPF》系列高清视频教程 | 讲师：刘铁猛</a><br>个人笔记:<a href="https://www.jianguoyun.com/p/DS06iqAQzcrfChjo9uQEIAA">https://www.jianguoyun.com/p/DS06iqAQzcrfChjo9uQEIAA</a></p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><h3 id="工作进度"><a href="#工作进度" class="headerlink" title="工作进度"></a>工作进度</h3><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h2 id="荆棘之路"><a href="#荆棘之路" class="headerlink" title="荆棘之路"></a>荆棘之路</h2><h3 id="error-CS0012-类型“Enum”在未引用的程序集中定义。必须添加对程序集“System-Runtime-Version-x3D-6-0-0-0-Culture-x3D-neutral-PublicKeyToken-x3D-b03f5f7f11d50a3a”的引用。"><a href="#error-CS0012-类型“Enum”在未引用的程序集中定义。必须添加对程序集“System-Runtime-Version-x3D-6-0-0-0-Culture-x3D-neutral-PublicKeyToken-x3D-b03f5f7f11d50a3a”的引用。" class="headerlink" title="error CS0012: 类型“Enum”在未引用的程序集中定义。必须添加对程序集“System.Runtime, Version&#x3D;6.0.0.0, Culture&#x3D;neutral, PublicKeyToken&#x3D;b03f5f7f11d50a3a”的引用。"></a><font style="color:blue">error CS0012: 类型“Enum”在未引用的程序集中定义。必须添加对程序集“System.Runtime, Version&#x3D;6.0.0.0, Culture&#x3D;neutral, PublicKeyToken&#x3D;b03f5f7f11d50a3a”的引用。</font></h3><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>没有引入System.Runtime.dll</p><h3 id="error-CS0518-预定义类型“System-Void”未定义或导入error-CS0518-预定义类型“System-Boolean”未定义或导入MyApp-txt-3-8-error-CS0518-预定义类型“System-Object”未定义或导入MyApp-txt-5-20-error-CS0518-预定义类型“System-String”未定义或导入MyApp-txt-5-10-error-CS0518-预定义类型“System-Void”未定义或导入"><a href="#error-CS0518-预定义类型“System-Void”未定义或导入error-CS0518-预定义类型“System-Boolean”未定义或导入MyApp-txt-3-8-error-CS0518-预定义类型“System-Object”未定义或导入MyApp-txt-5-20-error-CS0518-预定义类型“System-String”未定义或导入MyApp-txt-5-10-error-CS0518-预定义类型“System-Void”未定义或导入" class="headerlink" title="error CS0518: 预定义类型“System.Void”未定义或导入error CS0518: 预定义类型“System.Boolean”未定义或导入MyApp.txt(3,8): error CS0518: 预定义类型“System.Object”未定义或导入MyApp.txt(5,20): error CS0518: 预定义类型“System.String”未定义或导入MyApp.txt(5,10): error CS0518: 预定义类型“System.Void”未定义或导入"></a><font style="color:blue">error CS0518: 预定义类型“System.Void”未定义或导入error CS0518: 预定义类型“System.Boolean”未定义或导入MyApp.txt(3,8): error CS0518: 预定义类型“System.Object”未定义或导入MyApp.txt(5,20): error CS0518: 预定义类型“System.String”未定义或导入MyApp.txt(5,10): error CS0518: 预定义类型“System.Void”未定义或导入</font></h3><h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>没有引入mscorlib.dll</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">csc /r:&quot;C:\Program Files (x86)\dotnet\packs\Microsoft.WindowsDesktop.App.Ref\6.0.10\ref\net6.0\PresentationFramework.dll&quot;,&quot;C:\Program Files (x86)\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.10\ref\net6.0\System.Runtime.dll&quot;,&quot;C:\Program Files (x86)\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.10\ref\net6.0\mscorlib.dll&quot; /t:winexe MyApp.txt<br></code></pre></td></tr></table></figure><p>2022年11月5日07:08:33</p><h3 id="Rider编译器syncing-project-templates"><a href="#Rider编译器syncing-project-templates" class="headerlink" title="Rider编译器syncing project templates "></a><font style="color:blue">Rider编译器syncing project templates </font></h3><p>rider创建新项目一直显示syncing project templates </p><h4 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h4><p><a href="https://youtrack.jetbrains.com/issue/RIDER-79427">官方也未曾解决</a> 2022年11月5日08:08:40<br>A:为了工程进度，我只能先放弃2021.3版本Rider，下载2022.2.3试试，结果因为一些原因重装了2021.3倒是解决了 2<br>022年11月5日09:58:12</p><hr><p>江城子·乙卯正月二十日夜记梦<br>苏轼 〔宋代〕</p><p>十年生死两茫茫，不思量，自难忘。千里孤坟，无处话凄凉。纵使相逢应不识，尘满面，鬓如霜。<br>夜来幽梦忽还乡，小轩窗，正梳妆。相顾无言，惟有泪千行。料得年年肠断处，明月夜，短松冈</p><hr>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>c#</category>
      
      <category>WPF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内部测试页面</title>
    <link href="/2022/11/05/web/test/"/>
    <url>/2022/11/05/web/test/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/v2-25b8bd3ce8a1db36584f9179e41f1d30_720w%20(1).webp"></p><h1 id="网页测试页"><a href="#网页测试页" class="headerlink" title="网页测试页"></a>网页测试页</h1><p><a href="#time">跳转到时间测试</a></p><hr><p>uml测试</p><pre><code class=" mermaid">classDiagramclass A A : +String name A : -int age A : List~Object~ child //带泛型的变量 A : +eat() A : +sleep(time) //有参数的方法 A : +getAge() int //有返回值的方法</code></pre><pre><code class=" mermaid">classDiagramclass  B &#123; +String name -int age List~Object~ child +eat() +sleep(time) +getAge() int &#125;</code></pre><hr><p>流程图测试</p><pre><code class=" mermaid">graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D;</code></pre><pre><code class=" mermaid">graph TB c1--&gt;a2 subgraph one a1--&gt;a2 end subgraph two b1--&gt;b2 end subgraph three c1--&gt;c2 end</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start:开始<br>op=&gt;operation:操作<br>cond=&gt;condition:Y/N?<br>st-&gt;op-&gt;cond<br>io=&gt;inputoutput:输出<br>sub=&gt;subroutine:子流程<br>end=&gt;end:结束<br>cond(Y)-&gt;io<br>cond(N)-&gt;end<br></code></pre></td></tr></table></figure><hr><p>2022年11月5日19:46:21<br>markdown<br><img src="https://img2022.cnblogs.com/blog/3026848/202211/3026848-20221105154045920-856617644.png" alt="img"></p><hr><p>腾讯云测试<br><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/%E6%97%A0%E6%A0%87%E9%A2%98.png"></p><hr><p>锚点测试:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;Mark&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;这句话定义了锚点所指定的位置标记，名字为“Mark”.<br>[这句话是想要跳转到Mark处的锚点链接，点击即会跳转](<span class="hljs-comment">#Mark).</span><br></code></pre></td></tr></table></figure><p><a href="#Mark">跳转到诗歌</a></p><hr><p>使用html 测试<br><img src="https://img2022.cnblogs.com/blog/3026848/202211/3026848-20221105153612985-708421018.png"/></p><hr><p>使用url 测试<br><a href="https://img2022.cnblogs.com/blog/3026848/202211/3026848-20221105153612985-708421018.png">https://img2022.cnblogs.com/blog/3026848/202211/3026848-20221105153612985-708421018.png</a></p><hr><p>使用url引用测试<br><a href="https://img2022.cnblogs.com/blog/3026848/202211/3026848-20221105153612985-708421018.png">测试</a></p><hr><div id="time">时间测试</div>2022年11月6日17:39:232022年11月6日17:47:452022年11月6日17:58:232022年11月6日18:00:122022年11月6日18:23:252022年11月6日18:23:282022年11月6日18:23:412022年11月6日18:23:472022年11月6日18:23:492022年11月6日18:23:502022年11月6日19:05:56<hr><p>坚果云测试<br><img src="/test_md_files/688290c0-5f6b-11ed-ae30-839e6d328836.jpeg?v=1&type=image"></p><p><img src="https://www.jianguoyun.com/p/DRYU1rcQzcrfChjW6eUEIAA" alt="xxx"></p><hr><div id="Mark">诗歌测试</div><p>短歌行<br>王建 〔唐代〕</p><p>人初生，日初出。<br>上山迟，下山疾。<br>百年三万六千朝，夜里分将强半日。<br>有歌有舞须早为，昨日健于今日时。<br>人家见生男女好，不知男女催人老。<br>短歌行，无乐声</p><hr>]]></content>
    
    
    <categories>
      
      <category>本站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>windows shell</title>
    <link href="/2022/11/04/web/win/"/>
    <url>/2022/11/04/web/win/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/sesskik___year_of_the_snake_by_cati_art_d5ujgmi-350t-2x.jpg"></p><h1 id="win"><a href="#win" class="headerlink" title="win"></a>win</h1><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cls清除<br>doskey/HISTORY历史<br>date  /t当前日期<br>time /t当前时间<br>color 02 绿色<br>color 07 黑色<br>start运行程序<br>exit退出cmd<br>shutdown关机等 /s关机/sg彻底关机<br></code></pre></td></tr></table></figure><h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd  <br>cd ..<br></code></pre></td></tr></table></figure><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">dir显示当前目录的子文件和文件<br>dir /b只显示名称<br>tree<br>dir /S本电脑全部文件<br></code></pre></td></tr></table></figure><h3 id="改名"><a href="#改名" class="headerlink" title="改名"></a>改名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ren<br></code></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">md <br>md movie music 在当前目录中创建名为movie和music的文件夹<br>md d:\test\movie创建d:\test\movie目录<br>rd删除<br></code></pre></td></tr></table></figure><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">copy<br>copy key.txt c:\doc 将当前目录下的key.txt拷贝到c:\doc下（若doc中也存在一个key.txt文件，会询问是否覆盖）<br>copy jobs c:\doc 将当前目录下jobs文件夹中文件（不递归子目录）拷贝到c:\doc下（若doc中也存在相应的文件，会询问是否覆盖）<br>copy key.txt c:\doc\key_bak.txt将当前目录下的key.txt拷贝到c:\doc下，并重命名为key_bak.txt（若doc中也存在一个key_bak.txt文件，会询问是否覆盖)<br>/Y 不询问<br>copy key.txt +复制到自己(相当于重置日期)<br>copy /Y key1.txt + key2.txt key.txt将当前目录下的key1.txt与key2.txt的内容合并写入key.txt中（不询问，直接覆盖写)<br></code></pre></td></tr></table></figure><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">move *.png test 将当前目录下的png图片移动到当前目录下test文件夹中 （若test中也存在同名的png图片，会询问是否覆盖）<br>move /Y *.png test 将当前目录下的png图片移动到当前目录下test文件夹中 （不询问，直接覆盖写)<br>move 1.png d:\test\2.png将当前目录下的1.png移动到d盘test文件夹中，并重命名为2.png （若test中也存在同名的png图片，会询问是否覆盖）<br>move test d:\new 若d盘中存在new文件夹，将当前目录下的test文件夹移动到d盘new文件夹中；若不存在，将当前目录下的test文件夹移动到d盘，并重命名为new (无后缀的未知格式)<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">del test删除当前目录下的test文件夹中的所有非只读文件（子目录下的文件不删除；删除前会进行确认；等价于del test\*）<br>del /f test <br>删除当前目录下的test文件夹中的所有文件（含只读文件；子目录下的文件不删除；删除前会进行确认；等价于del /f test\*）<br><br>del /f /s /q test d:\test2\*.doc 删除当前目录下的test文件夹中所有文件及d:\test2中所有doc文件（含只读文件；递归子目录下的文件；删除前不确认del<br></code></pre></td></tr></table></figure><h3 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">type<br>type c:\11.txt  显示c盘中11.txt的文本内容<br>type conf.ini 显示当前目录下conf.ini的文本内容<br>type c:\11.txt | more <br>分页显示c盘中11.txt的文本内容  <br><br>more<br>more conf.ini逐屏的显示当前目录下conf.ini的文本内容   【空格：下一屏 q：退出 】<br></code></pre></td></tr></table></figure><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">&amp;顺序执行多条命令，而不管命令是否执行成功<br>cd /d d:\src&amp;work.exe /o c:\result.txt先将当前工作目录切换到d:\src下，然后执行work.exe /o c:\result.txt命令<br>&amp;&amp;顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令<br>find &quot;ok&quot; c:\test.txt &amp;&amp; echo如果找到了&quot;ok&quot;字样，就显示&quot;成功&quot;，找不到就不显示<br>||顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令<br>find &quot;ok&quot; c:\test.txt || echo如果找不到&quot;ok&quot;字样，就显示&quot;不成功&quot;，找到了就不显示<br>,<br>在某些特殊的情况下可以用来代替空格使用<br><br>dir,c:\  <br>相当于：dir c:\<br><br>;当命令相同的时候,可以将不同的目标用;隔离开来但执行效果不变。如执行过程中发生错误则只返回错误报告但程序还是会继续执行<br>dir c:\;d:\;e:\  dir c:\    dir d:\     dir e:\<br></code></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo输出一个&quot;回车换行&quot;，空白行<br>echo off  后续所有命令在执行前，不打印出命令的内容<br>echo on  后续所有命令在执行前，打印出命令的内容<br>echo 123  输出123到终端屏幕<br>echo &quot;Hello World!!!&quot;  输出Hello World!!!到终端屏幕<br>echo test &gt; p1.txt 输出test的字符串到当前目录中的p1.txt文件中（以覆盖的方式）<br></code></pre></td></tr></table></figure><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">find<br>find /N /I &quot;pid&quot; 1.txt 在1.txt文件中忽略大小写查找pid字符串，并带行号显示查找后的结果<br>find /C &quot;exe&quot; 1.txt只显示在1.txt文件中查找到exe字符串的次数<br>find /V &quot;exe&quot; 1.txt显示未包含1.txt文件中未包含exe字符串的行s<br><br>findstr<br>findstr &quot;hello world&quot; 1.txt 在1.txt文件中搜索hello或world<br>findstr /c:&quot;hello world&quot; 1.txt在1.txt文件中搜索hello world<br>findstr /c:&quot;hello world&quot; 1.txt nul<br>在1.txt文件中搜索hello world，并在每行结果前打印出1.txt:   注：findstr只有在2个及以上文件中搜索字符串时才会打印出每个文件的文件名，nul表示一个空文件<br><br>findstr /s /i &quot;Hello&quot; *.*不区分大小写，在当前目录和所有子目录中的所有文件中的hello<br></code></pre></td></tr></table></figure><h3 id="网络操作"><a href="#网络操作" class="headerlink" title="网络操作"></a>网络操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping<br>ing baidu.com测试与baidu服务器的连接情况<br>ping chen-pc0  <br>测试机器名为chen-pc0的连接情况<br><br>ping 220.181.111.86  测试与ip为220.181.111.86的连接情况<br>ping -l 65500 -n 10 qq.com  向qq.com发送10次65500字节的ping<br>ping -n 6 127.0.0.1<br>对当前主机执行6次ping操作（花费时间为5s）<br><br>ipconfig /all 查看本地ip地址等详细信息<br>nslookup www.cnblogs.com 获取www.cnblogs.com的域名解析<br><br>netstat<br>netstat -a查看开启了哪些端口<br>netstat -n <br>查看端口的网络连接情况<br>netstat -n <br>查看端口的网络连接情况<br>netstat -p tcp 查看tcp协议的使用情况<br><br>route print  显示出IP路由<br><br>telnet 182.140.167.44 8000  探测182.140.167.44是否使用TCP协议监听8000端口（注意：telnet命令不支持UDP端口检测）<br></code></pre></td></tr></table></figure><h3 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">tasklist全部进程<br><br>taskkill <br>taskkill /im notepad.exe结束名为notepad.exe的进程<br>taskkill /pid 1230 /pid 1241 /pid 1253 /t结束pid为1230、1241和1253的进程以及由它们启动起来的子进程<br>taskkill /f /im cmd.exe /t强制结束有名为cmd.exe的进程以及由它启动起来的子进程<br><br>user<br>net user 查看当前机器上的所有用户<br>net user Administrator  <br>查看当前机器上的Administrator用户的信息<br></code></pre></td></tr></table></figure><p>————————————————<br>版权声明：本文为CSDN博主「IT—INTEREST_挪吒」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/cldimd/article/details/103302720">https://blog.csdn.net/cldimd/article/details/103302720</a></p><h2 id="我的脚本"><a href="#我的脚本" class="headerlink" title="我的脚本"></a>我的脚本</h2><h3 id="上传hexo到github"><a href="#上传hexo到github" class="headerlink" title="上传hexo到github"></a>上传hexo到github</h3><p>bat格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">start /min hexo clean<br>ping -n 20 127.0.0.1<br>start /min hexo g<br>ping -n 20 127.0.0.1<br>start /min hexo d<br>ping -n 20 127.0.0.1<br>cd .deploy_git<br>git add .<br>git commit -m &quot;describe&quot;<br>git remote add origin<br>git push<br>start taskkill /f /im cmd.exe<br></code></pre></td></tr></table></figure><hr><p>沁园春·长沙</p><p><a href="https://so.gushiwen.cn/authorv_22550138288c.aspx">毛泽东</a>  <a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E8%BF%91%E7%8E%B0%E4%BB%A3">〔近现代〕</a></p><p>独立寒秋，湘江北去，橘子洲头。<br>看万山红遍，层林尽染；漫江碧透，百舸争流。<br>鹰击长空，鱼翔浅底，万类霜天竞自由。<br>怅寥廓，问苍茫大地，谁主沉浮？</p><p>携来百侣曾游。忆往昔峥嵘岁月稠。<br>恰同学少年，风华正茂；书生意气，挥斥方遒。<br>指点江山，激扬文字，粪土当年万户侯。<br>曾记否，到中流击水，浪遏飞舟？</p><hr>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2022/11/04/web/git/"/>
    <url>/2022/11/04/web/git/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blog-1314860893.cos.ap-nanjing.myqcloud.com/sesskik___tenseiga_by_cati_art_d61xzbx-fullview.jpg"></p><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>git confi -l</code></p><p>系统配置<code>git config --system --list</code></p><p>在Git\etc\gitconfig配置文件中.</p><p>全局配置<code>git config --global --list</code></p><p>在C:\Users\Administrator\ .gitconfig</p><p>取消代理:<code>git config --global http.sslVerify &quot;false&quot;</code></p><ul><li>配置用户名和邮箱:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;kuangshen&quot;  #名称<br>git config --global user.email 24736743@qq.com   #邮箱<br></code></pre></td></tr></table></figure><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><ul><li>本地 <code>git init</code></li><li>远程克隆<code>git clone [url]</code></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>查看状态:<code>status</code></p><p>追踪到暂存区<code>add</code> 可<code>.</code>表示全部未被跟踪的</p><p>提交暂存区的内容到本地仓库:<code>git commit</code> <code>-m &quot;xxxxxxxxxx&quot;</code>附加消息</p><p>推送到远程仓库<code>git push</code></p><h3 id="忽略"><a href="#忽略" class="headerlink" title="忽略"></a>忽略</h3><p>建立<code>.gitignore</code></p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！<br>!lib.txt     #但lib.txt除外<br>/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp<br>build/       #忽略build/目录下的所有文件<br>doc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt<br></code></pre></td></tr></table></figure><h3 id="码云"><a href="#码云" class="headerlink" title="码云"></a>码云</h3><p>设置本机绑定SSH公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入 C:\Users\Administrator\.ssh 目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成公钥</span><br>ssh-keygen<br>ssh-keygen -t rsa #rsa加密<br></code></pre></td></tr></table></figure><p>黏贴公钥文件的内容，到网页生成秘钥</p><p>建立仓库，克隆到本地.</p><ul><li>文件复制到项目.集成操作即可(命令行也行)</li></ul><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有本地分支</span><br>git branch<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有远程分支</span><br>git branch -r<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span><br>git branch [branch-name]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge [branch]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -d [branch-name]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin --delete [branch-name]</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -dr [remote/branch]</span><br></code></pre></td></tr></table></figure><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><hr><p>卜算子·咏梅</p><p><a href="https://so.gushiwen.cn/authorv_22550138288c.aspx">毛泽东</a>  <a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E8%BF%91%E7%8E%B0%E4%BB%A3">〔近现代〕</a></p><p>读陆游咏梅词，反其意而用之。</p><p>风雨送春归，飞雪迎春到。已是悬崖百丈冰，犹有花枝俏。<br>俏也不争春，只把春来报。待到山花烂漫时，她在丛中笑。</p><hr>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
